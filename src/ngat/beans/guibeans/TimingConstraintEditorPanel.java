/*
 * ObservingConstraintsEditorPanel.java
 *
 * Created on 15 January 2008, 11:43
 */
package ngat.beans.guibeans;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import ngat.oss.client.gui.dialog.NewTimingConstraintDialog;
import ngat.oss.client.gui.panel.interfaces.ITimingConstraintChangeListener;
import ngat.oss.client.gui.panel.timingConstraint.PhasedTimingConstraintEditorPanel;

import ngat.oss.client.gui.panel.timingConstraint.FixedTimingConstraintEditorPanel;
import ngat.oss.client.gui.panel.timingConstraint.FlexibleTimingConstraintEditorPanel;
import ngat.oss.client.gui.panel.interfaces.ITimingConstraintPanel;
import ngat.oss.client.gui.panel.timingConstraint.MinimumIntervalTimingConstraintEditorPanel;
import ngat.oss.client.gui.panel.timingConstraint.MonitorTimingConstraintEditorPanel;
import ngat.phase2.ITimingConstraint;
import ngat.phase2.XEphemerisTimingConstraint;
import ngat.phase2.XFixedTimingConstraint;
import ngat.phase2.XFlexibleTimingConstraint;
import ngat.phase2.XMinimumIntervalTimingConstraint;
import ngat.phase2.XMonitorTimingConstraint;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class TimingConstraintEditorPanel extends javax.swing.JPanel {

    static Logger logger = Logger.getLogger(TimingConstraintEditorPanel.class);

    //private ArrayList timingConstraintChangeListeners = new ArrayList();
    private boolean enabled;
    private ITimingConstraint timingConstraint;
    JPanel viewPanel = new JPanel();
    boolean isNewTimingConstraint;
    boolean allowFixedTimingConstraints;

    public TimingConstraintEditorPanel() {
        this(true);
    }

    public TimingConstraintEditorPanel(boolean allowFixedTimingConstraints) {
        this(allowFixedTimingConstraints, false);
    }

    public TimingConstraintEditorPanel(boolean allowFixedTimingConstraints, boolean isNewTimingConstraint) {
        this.isNewTimingConstraint = isNewTimingConstraint;
        this.allowFixedTimingConstraints = allowFixedTimingConstraints;
        
        initComponents();
        viewPanel.setLayout(new BoxLayout(viewPanel, BoxLayout.Y_AXIS));
        jScrollPane.setViewportView(viewPanel);
        try {
            updateView();
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    /*
    public void addTimingConstraintChangeListener(ITimingConstraintChangeListener changeListener) {
        this.timingConstraintChangeListeners.add(changeListener);
    }
    */

    public void setAllowFixedTimingConstraints(boolean allowFixedTimingConstraints) {
        this.allowFixedTimingConstraints = allowFixedTimingConstraints;
    }

    public void setControlButtonsVisibility(boolean visible) {
        jbtnAdd.setVisible(visible);
        jbtnDelete.setVisible(visible);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jbtnAdd = new javax.swing.JButton();
        jbtnDelete = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Timing Constraint", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        jbtnAdd.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jbtnAdd.setText("New constraint");
        jbtnAdd.setEnabled(false);
        jbtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddActionPerformed(evt);
            }
        });

        jbtnDelete.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbtnDelete.setText("Delete constraint");
        jbtnDelete.setEnabled(false);
        jbtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jbtnAdd)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbtnDelete)
                .addContainerGap(381, Short.MAX_VALUE))
            .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jbtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteActionPerformed
// TODO add your handling code here:
    int n = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete the Timing Constraint?",
            "Delete?",
            JOptionPane.YES_NO_OPTION);

    if (n == 0) {
        try {
            //yes
            this.timingConstraint = null;
            updateView();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    } else if (n == 1) {
        //no
    }

}//GEN-LAST:event_jbtnDeleteActionPerformed

private void jbtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddActionPerformed
// TODO add your handling code here:
    NewTimingConstraintDialog dialog = new NewTimingConstraintDialog(allowFixedTimingConstraints, true);
    dialog.setVisible(true);

    ITimingConstraint timingConstraint = dialog.getTimingConstraint();

    dialog.setVisible(false);
    dialog.dispose();
    try {
        setTimingConstraint(timingConstraint);
        updateView();
    } catch (Exception ex) {
        ex.printStackTrace();
        logger.error(ex);
    }
}//GEN-LAST:event_jbtnAddActionPerformed


public boolean containsValidTimingConstraint() {

    Component[] components =viewPanel.getComponents();
     if (components.length == 0) {
         return true;
     }

     ITimingConstraintPanel timingConstraintPanel = (ITimingConstraintPanel) components[0];
     if (timingConstraintPanel == null) {
         return false;
     }
     return timingConstraintPanel.containsValidTimingConstraint();
}

    public ITimingConstraint getTimingConstraint() {
        try {
            if (viewPanel.getComponents().length == 0) {
                return null;
            }
            ITimingConstraintPanel timingConstraintPanel = (ITimingConstraintPanel) viewPanel.getComponents()[0];
            return timingConstraintPanel.getTimingConstraint();
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        }
    }

    public void setTimingConstraint(ITimingConstraint timingConstraint) throws Exception {
        this.timingConstraint = timingConstraint;
        //notify listeners of the change in timing constraint
        /*
        Iterator i = timingConstraintChangeListeners.iterator();
        while (i.hasNext()) {
            ITimingConstraintChangeListener changeListener = (ITimingConstraintChangeListener) i.next();
            changeListener.receiveTimingConstraintChange(timingConstraint);
        }
        */
        updateView();
    }
    
    private void setTitle(String title) {
        final String titleI = title;
        final TitledBorder titledBorder = (TitledBorder)this.getBorder();
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                titledBorder.setTitle(titleI);
            }
        });
    }
    
    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        
        if (!enabled) {
            jbtnDelete.setEnabled(false);
            jbtnAdd.setEnabled(false);
        } else {
            jbtnDelete.setEnabled(timingConstraint != null);
            jbtnAdd.setEnabled(timingConstraint == null);
        }
        
        int componentCount = viewPanel.getComponentCount();
        for (int i = 0; i<componentCount; i++) {
            Component component = viewPanel.getComponent(i);
            component.setEnabled(enabled);
        }
    }
    
    public void updateView() throws Exception {

        if (timingConstraint == null) {
            viewPanel.removeAll();
            jScrollPane.validate();
            jScrollPane.repaint();
            jbtnDelete.setEnabled(false);
            jbtnAdd.setEnabled(true);
            setTitle("Timing Constraint");
            return;
        }

        if (timingConstraint instanceof XEphemerisTimingConstraint) {
            //setTitle("Phased Timing Constraint");
            XEphemerisTimingConstraint ephemerisTimingConstraint = (XEphemerisTimingConstraint) timingConstraint;
            PhasedTimingConstraintEditorPanel ephemerisTimingConstraintPanel = new PhasedTimingConstraintEditorPanel(ephemerisTimingConstraint, isNewTimingConstraint);
            viewPanel.removeAll();
            viewPanel.add(ephemerisTimingConstraintPanel);
        } else if (timingConstraint instanceof XFixedTimingConstraint) {
            //setTitle("Fixed Timing Constraint");
            XFixedTimingConstraint fixedTimingConstraint = (XFixedTimingConstraint) timingConstraint;
            FixedTimingConstraintEditorPanel fixedTimingConstraintPanel = new FixedTimingConstraintEditorPanel(fixedTimingConstraint, isNewTimingConstraint);
            viewPanel.removeAll();
            viewPanel.add(fixedTimingConstraintPanel);
        } else if (timingConstraint instanceof XFlexibleTimingConstraint) {
            //setTitle("Flexible Timing Constraint");
            XFlexibleTimingConstraint flexibleTimingConstraint = (XFlexibleTimingConstraint) timingConstraint;
            FlexibleTimingConstraintEditorPanel flexibleTimingConstraintPanel = new FlexibleTimingConstraintEditorPanel(flexibleTimingConstraint, isNewTimingConstraint);
            viewPanel.removeAll();
            viewPanel.add(flexibleTimingConstraintPanel);
        } else if (timingConstraint instanceof XMinimumIntervalTimingConstraint) {
            //setTitle("Minimum Interval Timing Constraint");
            XMinimumIntervalTimingConstraint minimumIntervalTimingConstraint = (XMinimumIntervalTimingConstraint) timingConstraint;
            MinimumIntervalTimingConstraintEditorPanel minimumIntervalTimingConstraintPanel = new MinimumIntervalTimingConstraintEditorPanel(minimumIntervalTimingConstraint, isNewTimingConstraint);
            viewPanel.removeAll();
            viewPanel.add(minimumIntervalTimingConstraintPanel);
        } else if (timingConstraint instanceof XMonitorTimingConstraint) {
            //setTitle("Monitor Timing Constraint");
            XMonitorTimingConstraint monitorTimingConstraint = (XMonitorTimingConstraint) timingConstraint;
            MonitorTimingConstraintEditorPanel monitorTimingConstraintPanel = new MonitorTimingConstraintEditorPanel(monitorTimingConstraint, isNewTimingConstraint);
            viewPanel.removeAll();
            viewPanel.add(monitorTimingConstraintPanel);
        } else {
            //setTitle("Unknown Timing Constraint");
            throw new Exception("Unknown timing constraint type");
        }

        jbtnAdd.setEnabled(false);
        jbtnDelete.setEnabled(true);
        jScrollPane.validate();
        jScrollPane.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton jbtnAdd;
    private javax.swing.JButton jbtnDelete;
    // End of variables declaration//GEN-END:variables

}
