/*
 * ObservingConstraintsEditorPanel.java
 *
 * Created on 15 January 2008, 11:43
 */
package ngat.beans.guibeans;

import java.awt.Component;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import ngat.oss.client.gui.panel.instrumentConfig.DualBeamSpectrographInstrumentConfigEditorPanel;
import ngat.oss.client.gui.panel.instrumentConfig.ImagerInstrumentConfigEditorPanel;
import ngat.oss.client.gui.panel.instrumentConfig.ImagingSpectrographInstrumentConfigEditorPanel;
import ngat.oss.client.gui.panel.instrumentConfig.PolarimeterInstrumentConfigEditorPanel;
import ngat.oss.client.gui.panel.instrumentConfig.TwoSlitSpectrographInstrumentConfigEditorPanel;
import ngat.oss.client.gui.panel.interfaces.IInstrumentConfigPanel;
import ngat.phase2.IInstrumentConfig;
import ngat.phase2.XDualBeamSpectrographInstrumentConfig;
import ngat.phase2.XImagerInstrumentConfig;
import ngat.phase2.XImagingSpectrographInstrumentConfig;
import ngat.phase2.XBlueTwoSlitSpectrographInstrumentConfig;
import ngat.phase2.XMoptopInstrumentConfig;
import ngat.phase2.XPolarimeterInstrumentConfig;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class InstrumentConfigEditorPanel extends javax.swing.JPanel {

    static Logger logger = Logger.getLogger(InstrumentConfigEditorPanel.class);
    private boolean enabled;

    JPanel viewPanel = new JPanel();

    /** Creates new form ObservingConstraintsEditorPanel */
    public InstrumentConfigEditorPanel() {
        initComponents();
        viewPanel.setLayout(new BoxLayout(viewPanel, BoxLayout.Y_AXIS));
        jScrollPane.setViewportView(viewPanel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Instrument Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public IInstrumentConfig getInstrumentConfig() {
        
        IInstrumentConfig instrumentConfig = null;
        
        if (viewPanel.getComponents().length ==0) {
            return null;
        }
        
        JPanel instrumentConfigPanel = (JPanel)viewPanel.getComponent(0);
        try {
            IInstrumentConfigPanel iInstrumentConfigPanel = (IInstrumentConfigPanel) instrumentConfigPanel;
            instrumentConfig = iInstrumentConfigPanel.getInstrumentConfig();
        } catch (ClassCastException cce) {
            logger.error("class cast exception", cce);
            return null;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Incorrectly formatted instrument config");
            ex.printStackTrace();
            logger.error(ex);
            return null;
        }
        /*
        try {
            if (instrumentConfigPanel instanceof ImagerInstrumentConfigEditorPanel) {
                    ImagerInstrumentConfigEditorPanel imagerInstrumentConfigEditorPanel = (ImagerInstrumentConfigEditorPanel) instrumentConfigPanel;
                    instrumentConfig = imagerInstrumentConfigEditorPanel.getInstrumentConfig();
            } else if (instrumentConfigPanel instanceof DualBeamSpectrographInstrumentConfigEditorPanel) {
                    DualBeamSpectrographInstrumentConfigEditorPanel dualBeamSpectrographInstrumentConfigEditorPanel = (DualBeamSpectrographInstrumentConfigEditorPanel) instrumentConfigPanel;
                    instrumentConfig = dualBeamSpectrographInstrumentConfigEditorPanel.getInstrumentConfig();
            } else if (instrumentConfigPanel instanceof PolarimeterInstrumentConfigEditorPanel) {
                    PolarimeterInstrumentConfigEditorPanel instrumentConfigEditorPanel = (PolarimeterInstrumentConfigEditorPanel) instrumentConfigPanel;
                    instrumentConfig = instrumentConfigEditorPanel.getInstrumentConfig();
            } else if (instrumentConfigPanel instanceof TipTiltImagerInstrumentConfigEditorPanel) {
                    TipTiltImagerInstrumentConfigEditorPanel instrumentConfigEditorPanel = (TipTiltImagerInstrumentConfigEditorPanel) instrumentConfigPanel;
                    instrumentConfig = instrumentConfigEditorPanel.getInstrumentConfig();
            } else {
                JOptionPane.showMessageDialog(this, "instrument config editor panel " + instrumentConfigPanel.getClass().getName() + " not yet implemented");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Incorrectly formatted instrument config");
            ex.printStackTrace();
            logger.error(ex);
            return null;
        }
        */
        return instrumentConfig;
    }

    public boolean containsValidInstrumentConfig() {
        if (viewPanel.getComponents().length ==0) {
            return false;
        }
        
        JPanel instrumentConfigPanel = (JPanel)viewPanel.getComponent(0);
        try {
            IInstrumentConfigPanel iInstrumentConfigPanel = (IInstrumentConfigPanel) instrumentConfigPanel;
            return iInstrumentConfigPanel.containsValidInstrumentConfig();
        } catch (ClassCastException cce) {
            logger.error("class cast exception", cce);
            return false;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Incorrectly formatted instrument config");
            ex.printStackTrace();
            logger.error(ex);
            return false;
        }
        
        /*
        JPanel instrumentConfigPanel = (JPanel)viewPanel.getComponent(0);
        if (instrumentConfigPanel instanceof ImagerInstrumentConfigEditorPanel) {
            ImagerInstrumentConfigEditorPanel instrumentConfigEditorPanel = (ImagerInstrumentConfigEditorPanel) instrumentConfigPanel;
            return instrumentConfigEditorPanel.containsValidInstrumentConfig();
        } else if (instrumentConfigPanel instanceof DualBeamSpectrographInstrumentConfigEditorPanel) {
            DualBeamSpectrographInstrumentConfigEditorPanel instrumentConfigEditorPanel = (DualBeamSpectrographInstrumentConfigEditorPanel) instrumentConfigPanel;
            return instrumentConfigEditorPanel.containsValidInstrumentConfig();
        } else if (instrumentConfigPanel instanceof PolarimeterInstrumentConfigEditorPanel) {
            PolarimeterInstrumentConfigEditorPanel instrumentConfigEditorPanel = (PolarimeterInstrumentConfigEditorPanel) instrumentConfigPanel;
            return instrumentConfigEditorPanel.containsValidInstrumentConfig();
        } else if (instrumentConfigPanel instanceof TipTiltImagerInstrumentConfigEditorPanel) {
            TipTiltImagerInstrumentConfigEditorPanel instrumentConfigEditorPanel = (TipTiltImagerInstrumentConfigEditorPanel) instrumentConfigPanel;
            return instrumentConfigEditorPanel.containsValidInstrumentConfig();
        }
        */
    }
    
    public void setInstrumentConfig(IInstrumentConfig instrumentConfig, boolean isNewInstrumentConfig, boolean canChangeInstrument) throws Exception {
        updateView(instrumentConfig, isNewInstrumentConfig, canChangeInstrument);
    }
    
    private void setTitle(String title) {
        TitledBorder titledBorder = (TitledBorder)this.getBorder();
        titledBorder.setTitle(title);
    }
    
    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        
        int componentCount = viewPanel.getComponentCount();
        for (int i = 0; i<componentCount; i++) {
            Component component = viewPanel.getComponent(i);
            component.setEnabled(enabled);
        }
    }
    
    private void updateView(IInstrumentConfig instrumentConfig, boolean isNewInstrumentConfig, boolean canChangeInstrument) throws Exception {

        if (instrumentConfig == null) {
            viewPanel.removeAll();
            jScrollPane.validate();
            jScrollPane.repaint();
            return;
        } 

        if (instrumentConfig instanceof XDualBeamSpectrographInstrumentConfig) {
            setTitle("Dual-Beam Spectrograph Instrument Config");
            XDualBeamSpectrographInstrumentConfig dualBeamSpectrographInstrumentConfig = (XDualBeamSpectrographInstrumentConfig) instrumentConfig;
            DualBeamSpectrographInstrumentConfigEditorPanel dualBeamSpectrographInstrumentConfigEditorPanel =
                    new DualBeamSpectrographInstrumentConfigEditorPanel(dualBeamSpectrographInstrumentConfig, canChangeInstrument);
            viewPanel.removeAll();
            viewPanel.add(dualBeamSpectrographInstrumentConfigEditorPanel);
        } else if (instrumentConfig instanceof XImagerInstrumentConfig) {
            setTitle("Imager Instrument Config");
            XImagerInstrumentConfig imagerInstrumentConfig = (XImagerInstrumentConfig) instrumentConfig;
            ImagerInstrumentConfigEditorPanel imagerInstrumentConfigEditorPanel = new ImagerInstrumentConfigEditorPanel(imagerInstrumentConfig, isNewInstrumentConfig);
            viewPanel.removeAll();
            viewPanel.add(imagerInstrumentConfigEditorPanel);
        } else if (instrumentConfig instanceof XPolarimeterInstrumentConfig) {
            setTitle("Polarimeter Instrument Config");
            XPolarimeterInstrumentConfig polarimeterInstrumentConfig = (XPolarimeterInstrumentConfig) instrumentConfig;
            PolarimeterInstrumentConfigEditorPanel polarimeterInstrumentConfigEditorPanel = new PolarimeterInstrumentConfigEditorPanel(polarimeterInstrumentConfig, isNewInstrumentConfig);
            viewPanel.removeAll();
            viewPanel.add(polarimeterInstrumentConfigEditorPanel);
        } else if (instrumentConfig instanceof XMoptopInstrumentConfig) {
            setTitle("Polarimeter Instrument Config");
            XMoptopInstrumentConfig moptopInstrumentConfig = (XMoptopInstrumentConfig) instrumentConfig;
            PolarimeterInstrumentConfigEditorPanel polarimeterInstrumentConfigEditorPanel = new PolarimeterInstrumentConfigEditorPanel(moptopInstrumentConfig, isNewInstrumentConfig);
            viewPanel.removeAll();
            viewPanel.add(polarimeterInstrumentConfigEditorPanel);
        } else if (instrumentConfig instanceof XImagingSpectrographInstrumentConfig) {
            setTitle("Imaging Spectrograph Instrument Config");
            XImagingSpectrographInstrumentConfig imagingSpectrographInstrumentConfig = (XImagingSpectrographInstrumentConfig) instrumentConfig;
            ImagingSpectrographInstrumentConfigEditorPanel imagingSpectrographInstrumentConfigEditorPanel = new ImagingSpectrographInstrumentConfigEditorPanel(imagingSpectrographInstrumentConfig, isNewInstrumentConfig);
            viewPanel.removeAll();
            viewPanel.add(imagingSpectrographInstrumentConfigEditorPanel);
        } else if (instrumentConfig instanceof XBlueTwoSlitSpectrographInstrumentConfig) {
            setTitle("Two Slit Spectrograph Instrument Config");
            XBlueTwoSlitSpectrographInstrumentConfig blueTwoSlitSpectrographInstrumentConfig = (XBlueTwoSlitSpectrographInstrumentConfig) instrumentConfig;
            TwoSlitSpectrographInstrumentConfigEditorPanel twoSlitSpectrographInstrumentConfigEditorPanel = new TwoSlitSpectrographInstrumentConfigEditorPanel(blueTwoSlitSpectrographInstrumentConfig, isNewInstrumentConfig);
            viewPanel.removeAll();
            viewPanel.add(twoSlitSpectrographInstrumentConfigEditorPanel);
        } else {
            setTitle("Unknown instrument config type");
            throw new Exception("Unknown instrument config type: " +instrumentConfig.getClass().getName() );
        }

        jScrollPane.validate();
        jScrollPane.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

}
