/*
 * ObservingConstraintsEditorPanel.java
 *
 * Created on 15 January 2008, 11:43
 */
package ngat.beans.guibeans;

import java.awt.Component;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import ngat.oss.client.gui.panel.target.EphemerisTargetEditorPanel;

import ngat.oss.client.gui.panel.target.ExtraSolarTargetEditorPanel;
import ngat.oss.client.gui.panel.target.SlaNamedPlanetTargetEditorPanel;
import ngat.oss.client.gui.panel.target.StandardTargetEditorPanel;

import ngat.phase2.ITarget;
import ngat.phase2.XEphemerisTarget;
import ngat.phase2.XExtraSolarTarget;
import ngat.phase2.XOrbitalElementsTarget;
import ngat.phase2.XSlaNamedPlanetTarget;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class TargetEditorPanel extends javax.swing.JPanel {

    static Logger logger = Logger.getLogger(TargetEditorPanel.class);
    private boolean enabled;
    
    private boolean isStandard;
    
    JPanel viewPanel = new JPanel();

    /** Creates new form ObservingConstraintsEditorPanel */
    public TargetEditorPanel() {
        initComponents();
        viewPanel.setLayout(new BoxLayout(viewPanel, BoxLayout.Y_AXIS));
        jScrollPane.setViewportView(viewPanel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Target", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public ITarget getTarget() {
        ITarget target = null;
        
        if (viewPanel.getComponents().length ==0) {
            return null;
        }
        
        JPanel targetPanel = (JPanel)viewPanel.getComponent(0);
        if (targetPanel instanceof ExtraSolarTargetEditorPanel) {
            try {
                ExtraSolarTargetEditorPanel extraSolarTargetEditorPanel = (ExtraSolarTargetEditorPanel) targetPanel;
                target = extraSolarTargetEditorPanel.getTarget();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Incorrectly formatted target");
                ex.printStackTrace();
                logger.error(ex);
                return null;
            }
        } else if (targetPanel instanceof SlaNamedPlanetTargetEditorPanel) {
            try {
                SlaNamedPlanetTargetEditorPanel slaNamedPlanetTargetEditorPanel = (SlaNamedPlanetTargetEditorPanel) targetPanel;
                target = slaNamedPlanetTargetEditorPanel.getTarget();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Incorrectly formatted target");
                ex.printStackTrace();
                logger.error(ex);
                return null;
            }
        } else if (targetPanel instanceof EphemerisTargetEditorPanel) {
            try {
                EphemerisTargetEditorPanel ephemerisTargetEditorPanel = (EphemerisTargetEditorPanel) targetPanel;
                target = ephemerisTargetEditorPanel.getTarget();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Incorrectly formatted target");
                ex.printStackTrace();
                logger.error(ex);
                return null;
            }
        } else if (targetPanel instanceof StandardTargetEditorPanel) {
            try {
                StandardTargetEditorPanel standardTargetEditorPanel = (StandardTargetEditorPanel) targetPanel;
                target = standardTargetEditorPanel.getTarget();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Incorrectly formatted target");
                ex.printStackTrace();
                logger.error(ex);
                return null;
            }
        } else {
            JOptionPane.showMessageDialog(this, "target editor panel " + targetPanel.getClass().getName() + " not yet implemented");
        }
        return target;
    }

    public boolean containsValidTarget() {
        if (viewPanel.getComponents().length ==0) {
            return false;
        }
        
        JPanel targetPanel = (JPanel)viewPanel.getComponent(0);
        if (targetPanel instanceof ExtraSolarTargetEditorPanel) {
            ExtraSolarTargetEditorPanel extraSolarTargetEditorPanel = (ExtraSolarTargetEditorPanel) targetPanel;
            return extraSolarTargetEditorPanel.containsValidTarget();
        } else if (targetPanel instanceof SlaNamedPlanetTargetEditorPanel) {
            SlaNamedPlanetTargetEditorPanel slaNamedPlanetTargetEditorPanel = (SlaNamedPlanetTargetEditorPanel) targetPanel;
            return slaNamedPlanetTargetEditorPanel.containsValidTarget();
        } else if (targetPanel instanceof EphemerisTargetEditorPanel) {
            EphemerisTargetEditorPanel ephemerisTargetEditorPanel = (EphemerisTargetEditorPanel) targetPanel;
            return ephemerisTargetEditorPanel.containsValidTarget();
        } else if (targetPanel instanceof StandardTargetEditorPanel) {
            StandardTargetEditorPanel standardTargetEditorPanel = (StandardTargetEditorPanel) targetPanel;
            return standardTargetEditorPanel.containsValidTarget();
        } 
        return false;
    }
    
    public void setTarget(ITarget target, boolean isNewTarget, boolean isStandard) throws Exception {
        this.isStandard = isStandard;
        updateView(target, isNewTarget);
    }
    
    private void setTitle(String title) {
        TitledBorder titledBorder = (TitledBorder)this.getBorder();
        titledBorder.setTitle(title);
    }
    
    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        
        int componentCount = viewPanel.getComponentCount();
        for (int i = 0; i<componentCount; i++) {
            Component component = viewPanel.getComponent(i);
            component.setEnabled(enabled);
        }
    }
    
    private void updateView(ITarget target, boolean isNewTarget) throws Exception {

        if (target == null) {
            viewPanel.removeAll();
            jScrollPane.validate();
            jScrollPane.repaint();
            return;
        }

        if (target instanceof XEphemerisTarget) {
            setTitle("Ephemeris Target");
            XEphemerisTarget ephemerisTarget = (XEphemerisTarget) target;
            EphemerisTargetEditorPanel ephemerisTargetEditorPanel = new EphemerisTargetEditorPanel(ephemerisTarget);
            viewPanel.removeAll();
            viewPanel.add(ephemerisTargetEditorPanel);
        } else if (target instanceof XExtraSolarTarget) {
            if (isStandard) {
                setTitle("Extra-Solar Target (standard)");
                XExtraSolarTarget extraSolarTarget = (XExtraSolarTarget) target;
                StandardTargetEditorPanel standardTargetEditorPanel = new StandardTargetEditorPanel(extraSolarTarget, isNewTarget);
                viewPanel.removeAll();
                viewPanel.add(standardTargetEditorPanel);
            } else {
                setTitle("Extra-Solar Target");
                XExtraSolarTarget extraSolarTarget = (XExtraSolarTarget) target;
                ExtraSolarTargetEditorPanel extraSolarTargetEditorPanel = new ExtraSolarTargetEditorPanel(extraSolarTarget, isNewTarget);
                viewPanel.removeAll();
                viewPanel.add(extraSolarTargetEditorPanel);
            }
            
        } else if (target instanceof XOrbitalElementsTarget) {
            setTitle("Un-implemented target choice");
            throw new Exception("unimplemented");
            
        } else if (target instanceof XSlaNamedPlanetTarget) {
            setTitle("Sla-Named Target");
            XSlaNamedPlanetTarget slaNamedPlanetTarget = (XSlaNamedPlanetTarget) target;
            SlaNamedPlanetTargetEditorPanel slaNamedPlanetTargetEditorPanel = new SlaNamedPlanetTargetEditorPanel(slaNamedPlanetTarget);
            viewPanel.removeAll();
            viewPanel.add(slaNamedPlanetTargetEditorPanel);
            
        } else {
            setTitle("Unknown target type");
            throw new Exception("Unknown target type: " +target.getClass().getName() );
        }

        jScrollPane.validate();
        jScrollPane.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

}
