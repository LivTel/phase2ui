/*
 * ObservingConstraintsEditorPanel.java
 *
 * Created on 15 January 2008, 11:43
 */

package ngat.beans.guibeans;


import java.awt.Component;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import ngat.oss.client.gui.dialog.NewObservingConstraintDialog;
import ngat.oss.client.gui.panel.interfaces.IObservingConstraintPanel;
import ngat.oss.client.gui.panel.observingConstraint.AirMassObservingConstraintPanel;
import ngat.oss.client.gui.panel.observingConstraint.HourAngleObservingConstraintPanel;
import ngat.oss.client.gui.panel.observingConstraint.PhotometricityObservingConstraintPanel;
import ngat.oss.client.gui.panel.observingConstraint.SeeingObservingConstraintPanel;
import ngat.oss.client.gui.panel.observingConstraint.SkyBrightnessObservingConstraintPanel;
import ngat.phase2.IObservingConstraint;
import ngat.phase2.XAirmassConstraint;
import ngat.phase2.XHourAngleConstraint;
import ngat.phase2.XPhotometricityConstraint;
import ngat.phase2.XSeeingConstraint;
import ngat.phase2.XSkyBrightnessConstraint;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class ObservingConstraintsEditorPanel extends javax.swing.JPanel {
    
    static Logger logger = Logger.getLogger(ObservingConstraintsEditorPanel.class);
    
    private boolean enabled;
    JPanel viewPanel = new JPanel();
    
    /** Creates new form ObservingConstraintsEditorPanel */
    public ObservingConstraintsEditorPanel() {
        initComponents();
        viewPanel.setLayout(new BoxLayout(viewPanel, BoxLayout.Y_AXIS));
        jScrollPane.setViewportView(viewPanel);
        addDefaultObsConstraints();
    }

    private void addDefaultObsConstraints() {
        XAirmassConstraint airmassConstraint = new XAirmassConstraint(2);
        addObservingConstraint(airmassConstraint);

        XSkyBrightnessConstraint skyBrightnessConstraint = new XSkyBrightnessConstraint(IObservingConstraint.MAG_4);
        addObservingConstraint(skyBrightnessConstraint);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jbtnAdd = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Observing Constraints", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        jbtnAdd.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbtnAdd.setText("Add new constraint");
        jbtnAdd.setEnabled(false);
        jbtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jbtnAdd)
                .addContainerGap(394, Short.MAX_VALUE))
            .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .add(2, 2, 2)
                .add(jbtnAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jbtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddActionPerformed
// TODO add your handling code here:
    NewObservingConstraintDialog dialog = new NewObservingConstraintDialog(this.getObservingConstraints(), true);
    dialog.setVisible(true);
    
    IObservingConstraint observingConstraint = dialog.getObservingConstraint();
    dialog.setVisible(false);
    dialog.dispose();

    if (observingConstraint == null) {
        return;
    }
    try {
        addObservingConstraint(observingConstraint);
    } catch (Exception ex) {
        ex.printStackTrace();
        logger.error(ex);
    }
}//GEN-LAST:event_jbtnAddActionPerformed
    
    public void deleteSelectedObservingConstraints() {
        Component[] components = viewPanel.getComponents();
        for (int i=0; i< components.length; i++ ) {
            IObservingConstraintPanel obsConstraintPanel = (IObservingConstraintPanel)components[i];
            if (obsConstraintPanel.shouldBeDeleted()) {
                deleteObservingConstraintPanel(obsConstraintPanel);
            }
        }
        List observingConstraints = getObservingConstraints();
        updateView(observingConstraints);
    }

    private void deleteObservingConstraintPanel(IObservingConstraintPanel obsConstraintPanel) {
        viewPanel.remove((Component)obsConstraintPanel);
    }
    
    private void addObservingConstraint(IObservingConstraint observingConstraint) {
        List observingConstraints = this.getObservingConstraints();
        observingConstraints.add(observingConstraint);
        updateView(observingConstraints);
    }

    public List getObservingConstraints() {
        ArrayList observingConstraints = new ArrayList();
        Component[] components = viewPanel.getComponents();
        for (int i=0; i< components.length; i++ ) {
            IObservingConstraintPanel obsConstraintPanel = (IObservingConstraintPanel)components[i];
            observingConstraints.add(obsConstraintPanel.getObservingConstraint());
        }
        return observingConstraints;
    }

    public void setObservingConstraints(List observingConstraints) throws Exception {
        updateView(observingConstraints);
    }

    public boolean containsValidObservingConstraints() {

        Component[] components = viewPanel.getComponents();
        for (int i=0; i< components.length; i++ ) {
            IObservingConstraintPanel obsConstraintPanel = (IObservingConstraintPanel)components[i];
            if (!obsConstraintPanel.containsValidObservingConstraint()) {
                return false;
            }
        }
        return true;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        
        int componentCount = viewPanel.getComponentCount();

        jbtnAdd.setEnabled(enabled);

        for (int i = 0; i<componentCount; i++) {
            IObservingConstraintPanel observingConstraintPanel = (IObservingConstraintPanel) viewPanel.getComponent(i);
            observingConstraintPanel.setEditable(enabled);
        }
    }
    
    private void updateView(List observingConstraints) {
        
        viewPanel.removeAll();
        
        if (observingConstraints == null) {
            return;
        }
        
        Iterator i = observingConstraints.iterator();
        while (i.hasNext()) {
            IObservingConstraint constraint = (IObservingConstraint)i.next();
            if (constraint == null) {
                return;
            }
            
            logger.info("adding observing constraint:  " + constraint);
            
            if (constraint instanceof XAirmassConstraint) {
                AirMassObservingConstraintPanel airMassConstraintPanel = new AirMassObservingConstraintPanel((XAirmassConstraint)constraint, false);
                airMassConstraintPanel.setEditable(true);
                viewPanel.add(airMassConstraintPanel);
            } else if (constraint instanceof XHourAngleConstraint) {
                HourAngleObservingConstraintPanel hourAngleConstraintPanel = new HourAngleObservingConstraintPanel((XHourAngleConstraint)constraint, false);
                hourAngleConstraintPanel.setEditable(true);
                viewPanel.add(hourAngleConstraintPanel);
                /*
            } else if (constraint instanceof XLunarDistanceConstraint) {
                LunarDistanceObservingConstraintPanel lunarDistanceConstraintPanel = new LunarDistanceObservingConstraintPanel((XLunarDistanceConstraint)constraint, false);
                lunarDistanceConstraintPanel.setEditable(true);
                viewPanel.add(lunarDistanceConstraintPanel);
            } else if (constraint instanceof XLunarElevationConstraint) {
                LunarElevationObservingConstraintPanel lunarElevationConstraintPanel = new LunarElevationObservingConstraintPanel((XLunarElevationConstraint)constraint, false);
                lunarElevationConstraintPanel.setEditable(true);
                viewPanel.add(lunarElevationConstraintPanel);
            } else if (constraint instanceof XLunarPhaseConstraint) {
                LunarPhaseObservingConstraintPanel lunarPhaseConstraintPanel = new LunarPhaseObservingConstraintPanel((XLunarPhaseConstraint)constraint, false);
                lunarPhaseConstraintPanel.setEditable(true);
                viewPanel.add(lunarPhaseConstraintPanel);
                 */
            } else if (constraint instanceof XPhotometricityConstraint) {
                PhotometricityObservingConstraintPanel photometricityConstraintPanel = new PhotometricityObservingConstraintPanel((XPhotometricityConstraint)constraint, false);
                photometricityConstraintPanel.setEditable(true);
                viewPanel.add(photometricityConstraintPanel);
            } else if (constraint instanceof XSeeingConstraint) {
                SeeingObservingConstraintPanel seeingConstraintPanel = new SeeingObservingConstraintPanel((XSeeingConstraint)constraint, false);
                seeingConstraintPanel.setEditable(true);
                viewPanel.add(seeingConstraintPanel);
            } else if (constraint instanceof XSkyBrightnessConstraint) {
                SkyBrightnessObservingConstraintPanel skyBrightnessConstraintPanel = new SkyBrightnessObservingConstraintPanel((XSkyBrightnessConstraint)constraint, false);
                skyBrightnessConstraintPanel.setEditable(true);
                viewPanel.add(skyBrightnessConstraintPanel);
                /*
            } else if (constraint instanceof XSolarElevationConstraint) {
                SolarElevationObservingConstraintPanel solarElevationConstraintPanel = new SolarElevationObservingConstraintPanel((XSolarElevationConstraint)constraint, false);
                solarElevationConstraintPanel.setEditable(true);
                viewPanel.add(solarElevationConstraintPanel);
                 */
            } else {
                JOptionPane.showMessageDialog(this, "UNKNOWN OBSERVING CONSTRAINT TYPE: " +constraint.getClass().getName() );
            }
        }
        jScrollPane.validate();
        jScrollPane.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton jbtnAdd;
    // End of variables declaration//GEN-END:variables


}
