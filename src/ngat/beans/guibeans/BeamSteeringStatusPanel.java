package ngat.beans.guibeans;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import ngat.oss.client.gui.reference.CONST;
import ngat.oss.client.gui.reference.DefaultObjectFactory;
import ngat.oss.client.gui.render.BeamRenderer_TEMP;
import ngat.phase2.IBeamSteeringConfig;
import ngat.phase2.XBeamSteeringConfig;


import java.io.File;
import java.io.IOException;
import ngat.oss.client.gui.wrapper.SlideArrangementsContainer;
import org.apache.log4j.Logger;

/**
 *
 * @author nrc
 */
public class BeamSteeringStatusPanel extends javax.swing.JPanel {

    static Logger logger = Logger.getLogger(BeamSteeringStatusPanel.class);

    private IBeamSteeringConfig beamStearingConfig;
    private BufferedImage image;

    public BeamSteeringStatusPanel() {
        this(null, null);
    }

    public BeamSteeringStatusPanel(IBeamSteeringConfig beamStearingConfig, SlideArrangementsContainer slideArrangementsContainer) {
        if (beamStearingConfig == null) {
            beamStearingConfig = DefaultObjectFactory.getDefaultBeamSteeringConfig();
        }

        initComponents();
        loadImage();
        setBeamStearingGUIState(beamStearingConfig);
    }

    private boolean loadImage() {

        try {
            //try load from local file
            image = ImageIO.read(new File(CONST.IO_SCHEMATIC_FILE_PATH));
            return true;
        } catch (IOException ex) {
            logger.info("couldn't find " + CONST.IO_SCHEMATIC_FILE_PATH);
        }

        //load failed, try next method (from web)
        try {
            image = ImageIO.read(new URL(CONST.IO_SCHEMATIC_URL_PATH));
            return true;
        } catch (IOException ex) {
            logger.info("couldn't find " + CONST.IO_SCHEMATIC_URL_PATH);
        }

        JOptionPane.showMessageDialog(this, "Unable to locate IO schematic image at " + CONST.IO_SCHEMATIC_FILE_PATH + " or at " + CONST.IO_SCHEMATIC_URL_PATH);
        return false;
    }

    
    public void setBeamStearingGUIState(IBeamSteeringConfig beamStearingConfig) {
        this.beamStearingConfig = beamStearingConfig;
        this.repaint();
    }

    @Override
    public void paintComponent(Graphics g) {
        g.drawImage(image, 0, 0, null);

        BeamRenderer_TEMP beamRenderer = new BeamRenderer_TEMP(beamStearingConfig);
        beamRenderer.drawComponents(g);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMaximumSize(new java.awt.Dimension(579, 453));
        setMinimumSize(new java.awt.Dimension(579, 453));
        setPreferredSize(new java.awt.Dimension(579, 453));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 577, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 451, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public static void main(String[] a) {
        JFrame frame = new JFrame();
        frame.setLayout(new BorderLayout());
        frame.getContentPane().add(new BeamSteeringStatusPanel(new XBeamSteeringConfig(), null));
        frame.setVisible(true);
    }
}
