/*
 * GroupHeaderPanel.java
 *
 * Created on 05 December 2007, 13:31
 */
package ngat.oss.client.gui.panel.headers;

import ngat.oss.client.gui.panel.interfaces.IEditablePanel;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import ngat.oss.client.HistoryModelClient;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.dialog.GroupCloningDialog;
import ngat.oss.client.gui.dialog.GroupHistoryDialog;
import ngat.oss.client.gui.frame.MainFrame;
import ngat.oss.client.gui.frame.ValidationFrame;
import ngat.oss.client.gui.util.LimitedCharactersDocument;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IGroup;
import ngat.phase2.IHistoryItem;
import ngat.phase2.IObservingConstraint;
import ngat.phase2.IProgram;
import ngat.phase2.IProposal;
import ngat.phase2.ITimingConstraint;
import ngat.phase2.XEphemerisTimingConstraint;
import ngat.phase2.XFixedTimingConstraint;
import ngat.phase2.XFlexibleTimingConstraint;
import ngat.phase2.XGroup;
import ngat.phase2.XPhotometricityConstraint;
import ngat.phase2.XSeeingConstraint;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class GroupHeaderPanel extends javax.swing.JPanel implements IEditablePanel {

    static Logger logger = Logger.getLogger(GroupHeaderPanel.class);

    private IProgram programme;
    private IGroup group;
    private IProposal proposal;
    private boolean enabled;

    /** Creates new form GroupHeaderPanel */
    public GroupHeaderPanel(IGroup group) {
        this.group = group;

        loadProposalAndProgramme();

        initComponents();
        populateComponents();
        setEnabled(false);
    }

    private void loadProposalAndProgramme() {
        try {
            Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
            long proposalId = phase2ModelClient.findProposalIdOfGroup(group.getID());
            proposal = phase2ModelClient.getProposal(proposalId);
            programme = phase2ModelClient.getProgrammeOfProposal(proposalId);
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, "An error occurred in loading the proposal object of this group.");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        observingConstraintsEditorPanel = new ngat.beans.guibeans.ObservingConstraintsEditorPanel();
        jbtnEdit = new javax.swing.JButton();
        jbtnSubmit = new javax.swing.JButton();
        timingConstraintEditorPanel = new ngat.beans.guibeans.TimingConstraintEditorPanel();
        jcbEnabled = new javax.swing.JCheckBox();
        jbtnViewHistory = new javax.swing.JButton();
        jcbUrgent = new javax.swing.JCheckBox();
        jtfProposalName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jplGroupDone = new javax.swing.JPanel();
        jlblGroupDone = new javax.swing.JLabel();
        jbtnResubmitGroup = new javax.swing.JButton();
        jlblGroupExpired = new javax.swing.JLabel();
        jbtnCancel = new javax.swing.JButton();
        jbtnValidate = new javax.swing.JButton();
        jbtnCloneGroup = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(680, 580));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel1.setText("GROUP");

        jbtnEdit.setText("Edit");
        jbtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditActionPerformed(evt);
            }
        });

        jbtnSubmit.setForeground(new java.awt.Color(255, 0, 0));
        jbtnSubmit.setText("Submit");
        jbtnSubmit.setEnabled(false);
        jbtnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSubmitActionPerformed(evt);
            }
        });

        jcbEnabled.setText("Group is enabled");

        jbtnViewHistory.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        jbtnViewHistory.setText("Execution History");
        jbtnViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnViewHistoryActionPerformed(evt);
            }
        });

        jcbUrgent.setText("Group is urgent");

        jtfProposalName.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel2.setText("Proposal");

        jplGroupDone.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jlblGroupDone.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        jlblGroupDone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblGroupDone.setText("Group done");

        jbtnResubmitGroup.setText("Resubmit");
        jbtnResubmitGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnResubmitGroupActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jplGroupDoneLayout = new org.jdesktop.layout.GroupLayout(jplGroupDone);
        jplGroupDone.setLayout(jplGroupDoneLayout);
        jplGroupDoneLayout.setHorizontalGroup(
            jplGroupDoneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jplGroupDoneLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jplGroupDoneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jlblGroupDone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnResubmitGroup))
                .addContainerGap())
        );
        jplGroupDoneLayout.setVerticalGroup(
            jplGroupDoneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jplGroupDoneLayout.createSequentialGroup()
                .add(jlblGroupDone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbtnResubmitGroup))
        );

        jlblGroupExpired.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        jlblGroupExpired.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblGroupExpired.setText("Group expired");

        jbtnCancel.setForeground(new java.awt.Color(255, 0, 0));
        jbtnCancel.setText("Cancel");
        jbtnCancel.setEnabled(false);
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jbtnValidate.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        jbtnValidate.setText("Validate Group");
        jbtnValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnValidateActionPerformed(evt);
            }
        });

        jbtnCloneGroup.setText("Clone Group");
        jbtnCloneGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloneGroupActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jbtnEdit)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnSubmit)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnCancel))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(1, 1, 1)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel1)
                                    .add(jLabel2))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jtfProposalName)
                                    .add(jtfName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 13, Short.MAX_VALUE))
                            .add(timingConstraintEditorPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .add(observingConstraintsEditorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 522, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(jbtnCloneGroup)
                            .add(jbtnValidate)
                            .add(jlblGroupExpired, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jplGroupDone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jcbUrgent)
                            .add(jbtnViewHistory)
                            .add(jcbEnabled))
                        .add(20, 20, 20)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jbtnValidate, jbtnViewHistory}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {observingConstraintsEditorPanel, timingConstraintEditorPanel}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jbtnViewHistory)
                            .add(layout.createSequentialGroup()
                                .add(36, 36, 36)
                                .add(jbtnValidate)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jcbUrgent)
                            .add(layout.createSequentialGroup()
                                .add(33, 33, 33)
                                .add(jcbEnabled)
                                .add(14, 14, 14)
                                .add(jlblGroupExpired, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(18, 18, 18)
                        .add(jplGroupDone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jbtnCloneGroup))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jtfName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jtfProposalName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(timingConstraintEditorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(observingConstraintsEditorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnEdit)
                    .add(jbtnSubmit)
                    .add(jbtnCancel))
                .addContainerGap(86, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jbtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditActionPerformed
// TODO add your handling code here:
    MainFrame.getInstance().displayMessage("Editing Group");
    setEnabled(true);
    MainFrame.getInstance().enableTrees(false);
}//GEN-LAST:event_jbtnEditActionPerformed

    public boolean isBeingEdited() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {

        jtfName.setEnabled(enabled);

        timingConstraintEditorPanel.setEnabled(enabled);
        observingConstraintsEditorPanel.setEnabled(enabled);

        jbtnEdit.setEnabled(!enabled);
        jbtnSubmit.setEnabled(enabled);
        jbtnCancel.setEnabled(enabled);
        jcbEnabled.setEnabled(enabled);
        if (jcbUrgent.isVisible()) {
            jcbUrgent.setEnabled(enabled);
        }

        jbtnCloneGroup.setEnabled(!enabled);
        this.enabled = enabled;
    }

    private boolean isValidTimingConstraintVersusObsConstraints() {
        ITimingConstraint timingConstraint =  timingConstraintEditorPanel.getTimingConstraint();
        if (timingConstraint instanceof XFixedTimingConstraint) {
            //it's a fixed timing constraint, iterate through the observing constraints to check for disallowed ones
            Iterator i = observingConstraintsEditorPanel.getObservingConstraints().iterator();
            while (i.hasNext()) {
                IObservingConstraint observingConstraint = (IObservingConstraint) i.next();
                //System.err.println(observingConstraint.getClass().getName());
                if (observingConstraint instanceof XSeeingConstraint) {
                    //ok
                } else if (observingConstraint instanceof XPhotometricityConstraint) {
                    //that's ok too
                } else {
                    return false;
                }
            }
            return true; //no constraints other than Seeing and Photometricity have been found
        } else {
          //it's not a fixed timing constraint
          return true;
        }
    }

private void jbtnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSubmitActionPerformed

    if (!timingConstraintEditorPanel.containsValidTimingConstraint()) {
        JOptionPane.showMessageDialog(this, "The timing constraint is invalid");
        return;
    }

    if (!observingConstraintsEditorPanel.containsValidObservingConstraints()) {
        JOptionPane.showMessageDialog(this, "One of the observing constraints is invalid");
        return;
    }
    
     //clear out the obs constraints panels that are no longer needed
    observingConstraintsEditorPanel.deleteSelectedObservingConstraints();

    if (!isValidTimingConstraintVersusObsConstraints()) {
        JOptionPane.showMessageDialog(this, "The submission was not successful. \n\nA Fixed Timing Constraint has been requested, however Observing Constraints other than 'Seeing' and 'Photometricity' have also been specified.\n\nIf you wish to use a Fixed Timing Constraint then delete the invalid Observing Constraints and click Submit again.");
        return;
    }
    
    XGroup xGroup = (XGroup) group;

    //required fields: name, priority, active, timingConstraint, observingConstraints
    boolean nameHasChanged;
    String name;
    int priority;
    boolean groupIsEnabled;
    ITimingConstraint timingConstraint;
    List observingConstraints;

    name = jtfName.getText().trim();

    nameHasChanged = !group.getName().trim().equals(name.trim());

    if (name.length() == 0) {
        JOptionPane.showMessageDialog(this, "Please set a name for the group.", "Submission failed", JOptionPane.OK_OPTION);
        return;
    }

    Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
    try {
        long proposalId = phase2ModelClient.findProposalIdOfGroup(group.getID());
        long idOfOtherGroup = phase2ModelClient.findIdOfGroupInProposal(name, proposalId);

        if ((idOfOtherGroup != group.getID()) && (idOfOtherGroup != -1)) {
            JOptionPane.showMessageDialog(this, "Another group exists with this name in this proposal, please enter a different name.");
            return;
        }
    } catch (Phase2Exception ex) {
        ex.printStackTrace();
        logger.error(ex);
        JOptionPane.showMessageDialog(this, ex.getMessage());
        JOptionPane.showMessageDialog(this, "The group was NOT added");
        MainFrame.getInstance().enableTrees(true);
        return;
    }

    //set priority to 1. unused feature atm
    priority = 1;

    groupIsEnabled = jcbEnabled.isSelected();
    timingConstraint = timingConstraintEditorPanel.getTimingConstraint();

    observingConstraints = observingConstraintsEditorPanel.getObservingConstraints();

    boolean urgent = jcbUrgent.isSelected();

    xGroup.setName(name);
    xGroup.setPriority(priority);
    xGroup.setActive(groupIsEnabled);
    xGroup.setTimingConstraint(timingConstraint);
    xGroup.setObservingConstraints(observingConstraints);
    xGroup.setUrgent(urgent);

    final int KEY = 999;
    try {
        phase2ModelClient.updateGroup(group, KEY);
        MainFrame.getInstance().displayMessage("Edit Submitted");
        setEnabled(false);
        /*
         * commented out 12/3/12:
        if (nameHasChanged) {
            MainFrame.getInstance().reloadSelectedNodeParent();
        }
        */
        if (timingConstraint != null) {
            if (timingConstraint.getEndTime() < new Date().getTime()) {
                jlblGroupExpired.setVisible(true);
            } else {
                jlblGroupExpired.setVisible(false);
            }
        } else {
            jlblGroupExpired.setVisible(false);
        }
    } catch (Phase2Exception ex) {
        JOptionPane.showMessageDialog(this, "update failed: " + ex.getMessage());
        MainFrame.getInstance().enableTrees(true);
        return;
    }
    MainFrame.getInstance().enableTrees(true);
    MainFrame.getInstance().reloadSelectedNodeParent();
}//GEN-LAST:event_jbtnSubmitActionPerformed

private void jbtnViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnViewHistoryActionPerformed

    GroupHistoryDialog groupHistoryDialog = new GroupHistoryDialog(group);
    groupHistoryDialog.setVisible(true);

    //blocks

    groupHistoryDialog.setVisible(false);
    groupHistoryDialog.dispose();
}//GEN-LAST:event_jbtnViewHistoryActionPerformed

private void jbtnResubmitGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnResubmitGroupActionPerformed
    //resubmit the group, i.e. :
    //set startTime to now
    //set endTime to startTime + original lifetime of group

    if (group.getTimingConstraint() instanceof XFlexibleTimingConstraint) {
        resubmitForFlexibleTimingConstraint();
        MainFrame.getInstance().showHeaderPanel(new GroupHeaderPanel(group));
    } else if (group.getTimingConstraint() instanceof XEphemerisTimingConstraint) {
        try {
            resubmitForEphemerisTimingConstraint();
            MainFrame.getInstance().showHeaderPanel(new GroupHeaderPanel(group));
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, "update failed: " + ex.getMessage());
        }
    }
}//GEN-LAST:event_jbtnResubmitGroupActionPerformed

private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
    MainFrame.getInstance().showHeaderPanel(new GroupHeaderPanel(group));
    MainFrame.getInstance().enableTrees(true);
}//GEN-LAST:event_jbtnCancelActionPerformed

private void jbtnValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnValidateActionPerformed
    new ValidationFrame(group).setVisible(true);
}//GEN-LAST:event_jbtnValidateActionPerformed

private void jbtnCloneGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloneGroupActionPerformed

    JOptionPane.showMessageDialog(this,"We recommend that you validate the group before cloning it.");
    
    GroupCloningDialog dialog = new GroupCloningDialog(programme, proposal, group);
    dialog.setVisible(true);

    //blocks

    dialog.setVisible(false);
    dialog.dispose();

}//GEN-LAST:event_jbtnCloneGroupActionPerformed

    private void resubmitForEphemerisTimingConstraint() throws Phase2Exception, Exception {

        //only called if the group has a XEphemerisTimingConstraint
        XEphemerisTimingConstraint ephemerisTimingConstraint = (XEphemerisTimingConstraint) group.getTimingConstraint();

        long lastGroupSuccessTime = getLastSuccessTimeOfGroup();
        if (lastGroupSuccessTime == -1) {
            //shouldn't happen, because if there isn't a completion history item, the button calling this method isn't clickable
            throw new Exception("No completion history item found for group " + group);
        }

        long timeToSuccessfromStart = lastGroupSuccessTime - ephemerisTimingConstraint.getStart();
        double cyclePeriod = ephemerisTimingConstraint.getCyclePeriod();
        double numberOfPeriodsSinceStart = timeToSuccessfromStart / cyclePeriod;
        double newPeriodStart = Math.floor(numberOfPeriodsSinceStart) + 1;
        long newStartTime = (long) (newPeriodStart * ephemerisTimingConstraint.getCyclePeriod());
        newStartTime += ephemerisTimingConstraint.getStart();
        ephemerisTimingConstraint.setStart(newStartTime);

        XGroup xGroup = (XGroup) group;
        xGroup.setTimingConstraint(ephemerisTimingConstraint);

        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
        final int KEY = 999;

        phase2ModelClient.updateGroup(group, KEY);
        MainFrame.getInstance().displayMessage("Re-submit successful. The start time of the group was set to be in the next period after group completion.");

        timingConstraintEditorPanel.setTimingConstraint(ephemerisTimingConstraint);
        timingConstraintEditorPanel.updateView();
        jplGroupDone.setVisible(false);

        timingConstraintEditorPanel.setEnabled(false);
    }

    private void resubmitForFlexibleTimingConstraint() {
        //only called if the group has a XFlexibleTimingConstraint
        XFlexibleTimingConstraint flexibleTimingConstraint = (XFlexibleTimingConstraint) group.getTimingConstraint();

        long newStartTime = new Date().getTime();
        long newEndTime;
        boolean endTimeChanged;
        if (new Date().getTime() < flexibleTimingConstraint.getEndTime()) {
            //we haven't reached the original end time of the group
            //leave the end time as that value
            newEndTime = flexibleTimingConstraint.getEndTime();
            endTimeChanged = false;
        } else {
            long newLifeTimeLength = flexibleTimingConstraint.getEndTime() - flexibleTimingConstraint.getStartTime();
            newEndTime = newStartTime + newLifeTimeLength;
            endTimeChanged = true;
        }

        flexibleTimingConstraint.setActivationDate(newStartTime);
        flexibleTimingConstraint.setExpiryDate(newEndTime);
        XGroup xGroup = (XGroup) group;
        xGroup.setTimingConstraint(flexibleTimingConstraint);

        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
        final int KEY = 999;
        try {
            phase2ModelClient.updateGroup(group, KEY);
            MainFrame.getInstance().displayMessage("Re-submit successful. The start time of the group was set to the re-submission time.");
            if (endTimeChanged) {
                MainFrame.getInstance().displayMessage("Please be aware that the end time of the group has been altered automatically, and may now need manual editing.");
            }
            timingConstraintEditorPanel.setTimingConstraint(flexibleTimingConstraint);
            timingConstraintEditorPanel.updateView();
            jplGroupDone.setVisible(false);
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, "update failed: " + ex.getMessage());
        }
        timingConstraintEditorPanel.setEnabled(false);
    }

    private void setUpForCompletedGroup() {

        //if it's an ephemeris or flexible group, and if the last success entry in the history model is after it's start-time
        //then show the jplGroupDone panel (hence allowing access to the re-submit button)

        ITimingConstraint timingConstraint = group.getTimingConstraint();
        long startTime;

        if (timingConstraint instanceof XFlexibleTimingConstraint) {
            XFlexibleTimingConstraint flexibleTimingConstraint = (XFlexibleTimingConstraint) timingConstraint;
            startTime = flexibleTimingConstraint.getStartTime();
        } else if (timingConstraint instanceof XEphemerisTimingConstraint) {
            XEphemerisTimingConstraint ephemerisTimingConstraint = (XEphemerisTimingConstraint) timingConstraint;
            startTime = ephemerisTimingConstraint.getStartTime();
        } else {
            //not a flexible or ephemeris timing constraint
            jplGroupDone.setVisible(false);
            return;
        }

        long lastSuccessTimeOfGroup;
        try {
            lastSuccessTimeOfGroup = getLastSuccessTimeOfGroup();
        } catch (Phase2Exception ex) {
            jplGroupDone.setVisible(false);
            ex.printStackTrace();
            logger.error(ex);
            return;
        }

        if (lastSuccessTimeOfGroup == -1) {
            //group doesn't have a 'success' history item associated with it
            jplGroupDone.setVisible(false);
            return;
        }

        boolean lastSuccessIsAfterGroupStart = lastSuccessTimeOfGroup >= startTime;
        //System.err.println(lastSuccessHistoryItem.getCompletionTime() + " >=" + startTime + " = "  + lastSuccessIsAfterGroupStart);
        jplGroupDone.setVisible(lastSuccessIsAfterGroupStart);
    }

//return the time of the last completion of this group (i.e. the last 'success' entry in the history model) , or -1 if it's not completed
    private long getLastSuccessTimeOfGroup() throws Phase2Exception {

        HistoryModelClient historyModelClient = HistoryModelClient.getInstance();
        List historyItemsList = historyItemsList = historyModelClient.listHistoryItems(group.getID());
        Iterator hili = historyItemsList.iterator();
        IHistoryItem lastSuccessHistoryItem = null;
        while (hili.hasNext()) {
            IHistoryItem historyItem = (IHistoryItem) hili.next();
            if (historyItem.getCompletionStatus() == IHistoryItem.EXECUTION_SUCCESSFUL) {
                lastSuccessHistoryItem = historyItem;
            }
        }
        //System.err.println(lastSuccessHistoryItem);
        if (lastSuccessHistoryItem == null) {
            return -1;
        } else {
            return lastSuccessHistoryItem.getCompletionTime();
        }
    }

    private void populateComponents() {

        jtfName.setDocument(new LimitedCharactersDocument(LimitedCharactersDocument.STRICT_LIMITATION));
        
        if (proposal == null) {
            return;
        }
        jtfName.setText(group.getName());
        jcbEnabled.setSelected(group.isActive());

        jtfProposalName.setText(proposal.getName());
        
        int priority = group.getPriority();

        //Timing Constraint
        ITimingConstraint timingConstraint = group.getTimingConstraint();
        if (timingConstraint != null) {
            if (timingConstraint.getEndTime() < new Date().getTime()) {
                jlblGroupExpired.setVisible(true);
            } else {
                jlblGroupExpired.setVisible(false);
            }
        } else {
            jlblGroupExpired.setVisible(false);
        }

        try {
            timingConstraintEditorPanel.setAllowFixedTimingConstraints(proposal.allowsFixedGroups());
            timingConstraintEditorPanel.removeAll();
            timingConstraintEditorPanel.setTimingConstraint(timingConstraint);
            timingConstraintEditorPanel.validate();
            timingConstraintEditorPanel.repaint();
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, ex);
            return;
        }

        setUpForCompletedGroup();

        //Observing Constraints
        try {
            observingConstraintsEditorPanel.setObservingConstraints(group.listObservingConstraints());
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }

        //Urgent tick-box
        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
        try {
            long proposalId = phase2ModelClient.findProposalIdOfGroup(group.getID());
            IProposal proposal = phase2ModelClient.getProposal(proposalId);
            if (proposal == null) {
                throw new Exception("Parent Proposal is null!");
            }
            boolean proposalAllowsUrgentGroups = proposal.allowsUrgentGroups();
            jcbUrgent.setVisible(proposalAllowsUrgentGroups);
            if (proposalAllowsUrgentGroups) {
                jcbUrgent.setSelected(group.isUrgent());
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e);
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    /*
    public void receiveTimingConstraintChange(ITimingConstraint newTimingConstraint) {
        
        JOptionPane.showMessageDialog(this, "receiveTimingConstraintChange, unnecessary??");
        //the timing constraint in the timingConstraintEditorPanel has changed
        if (newTimingConstraint instanceof XFixedTimingConstraint) {
            //it's a fixed timing constraint
            //iterate through the observing constraints in observingConstraintsEditorPanel to see if they are allowed
            List observingConstraints = observingConstraintsEditorPanel.getObservingConstraints();
            Iterator i = observingConstraints.iterator();
            while (i.hasNext()) {
                
            }
        }
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnCloneGroup;
    private javax.swing.JButton jbtnEdit;
    private javax.swing.JButton jbtnResubmitGroup;
    private javax.swing.JButton jbtnSubmit;
    private javax.swing.JButton jbtnValidate;
    private javax.swing.JButton jbtnViewHistory;
    private javax.swing.JCheckBox jcbEnabled;
    private javax.swing.JCheckBox jcbUrgent;
    private javax.swing.JLabel jlblGroupDone;
    private javax.swing.JLabel jlblGroupExpired;
    private javax.swing.JPanel jplGroupDone;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfProposalName;
    private ngat.beans.guibeans.ObservingConstraintsEditorPanel observingConstraintsEditorPanel;
    private ngat.beans.guibeans.TimingConstraintEditorPanel timingConstraintEditorPanel;
    // End of variables declaration//GEN-END:variables
}
