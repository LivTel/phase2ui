/*
 * ProposalHeaderPanel.java
 *
 * Created on 05 December 2007, 12:19
 */

package ngat.oss.client.gui.panel.headers;

import ngat.oss.client.gui.panel.interfaces.IEditablePanel;
import java.awt.Color;
import java.text.ParseException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import ngat.oss.client.AccessModelClient;
import ngat.oss.client.AccountModelClient;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.dialog.AccountsDialog;
import ngat.oss.client.gui.dialog.InstrumentConfigListDialog;
import ngat.oss.client.gui.dialog.NewGroupDialog;
import ngat.oss.client.gui.dialog.TargetListDialog;
import ngat.oss.client.gui.frame.MainFrame;
import ngat.oss.client.gui.frame.ValidationFrame;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.exception.Phase2Exception;
import ngat.oss.reference.AccountTypes;
import ngat.oss.reference.Const;
import ngat.phase2.IAccessPermission;
import ngat.phase2.IGroup;
import ngat.phase2.IProgram;
import ngat.phase2.IProposal;
import ngat.phase2.ISemester;
import ngat.phase2.ISemesterPeriod;
import ngat.phase2.ITag;
import ngat.phase2.ITimingConstraint;
import ngat.phase2.IUser;
import ngat.phase2.XAccount;
import ngat.phase2.XFixedTimingConstraint;
import ngat.phase2.XProposal;
import ngat.phase2.util.Rounder;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class ProposalHeaderPanel extends javax.swing.JPanel implements IEditablePanel {

    static Logger logger = Logger.getLogger(ProposalHeaderPanel.class);

    private static final int DATE_TYPE_ACTIVATION = 0;
    private static final int DATE_TYPE_EXPIRY = 1;

    private static final String BTN_PREFIX_TARGETS_VIEW = "Targets in programme: ";
    private static final String BTN_PREFIX_INSTR_CFGS_VIEW = "Instrument Configs in programme: ";
    
    private IProposal proposal;
    private IProgram program = null;
    
    private boolean enabled;

    /** Creates new form ProposalHeaderPanel */
    public ProposalHeaderPanel(IProposal proposal) {
        this.proposal = proposal;
        try {
            program = Phase2ModelClient.getInstance().getProgrammeOfProposal(proposal.getID());
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }

        initComponents();
        populateComponents();
        setEnabled(false);

        //set visible certain buttons if the user is a super user
        boolean isSuperUser = Session.getInstance().getUser().isSuperUser();

        jbtnEdit.setVisible(isSuperUser);
        jbtnSubmit.setVisible(isSuperUser);
        jbtnCancel.setVisible(isSuperUser);
        jplCodePanel.setVisible(isSuperUser);
        jplPriorityOffsetPanel.setVisible(isSuperUser);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jtfTitle = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jtfTag = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jtfProgramme = new javax.swing.JTextField();
        jbtnSubmit = new javax.swing.JButton();
        jbtnEdit = new javax.swing.JButton();
        jcbRank = new javax.swing.JComboBox();
        jbtnAccount = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtdInvestigators = new javax.swing.JTextArea();
        dtepActivation = new ngat.beans.guibeans.DateTimeEditorPanel();
        dtepExpiry = new ngat.beans.guibeans.DateTimeEditorPanel();
        jcbAllowUrgent = new javax.swing.JCheckBox();
        jcbEnabled = new javax.swing.JCheckBox();
        jlblTimeUsed = new javax.swing.JLabel();
        jplPriorityOffsetPanel = new javax.swing.JPanel();
        jtfPriorityOffset = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jcbAllowFixedGroups = new javax.swing.JCheckBox();
        jbtnTargetsView = new javax.swing.JButton();
        jbtnInstrumentConfigs = new javax.swing.JButton();
        jbtnValidate = new javax.swing.JButton();
        jbtnCancel = new javax.swing.JButton();
        jbtnCreateGroup = new javax.swing.JButton();
        jplCodePanel = new javax.swing.JPanel();
        jtfCode = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jtfInactiveCount = new javax.swing.JTextField();
        jtfActiveCount = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 10)); // NOI18N
        jLabel1.setText("PROPOSAL");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel3.setText("Title");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel4.setText("Rank");

        jtfName.setEditable(false);
        jtfName.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N

        jtfTitle.setEditable(false);
        jtfTitle.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel10.setText("Tag:");

        jtfTag.setEditable(false);
        jtfTag.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel11.setText("Programme:");

        jtfProgramme.setEditable(false);
        jtfProgramme.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N

        jbtnSubmit.setForeground(new java.awt.Color(255, 0, 0));
        jbtnSubmit.setText("Submit");
        jbtnSubmit.setEnabled(false);
        jbtnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSubmitActionPerformed(evt);
            }
        });

        jbtnEdit.setText("Edit");
        jbtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditActionPerformed(evt);
            }
        });

        jcbRank.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "Z" }));
        jcbRank.setEnabled(false);

        jbtnAccount.setText("Accounts");
        jbtnAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAccountActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setText("Investigators:");

        jtdInvestigators.setEditable(false);
        jtdInvestigators.setColumns(20);
        jtdInvestigators.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jtdInvestigators.setRows(5);
        jScrollPane3.setViewportView(jtdInvestigators);

        dtepActivation.setTitle("Activation");

        dtepExpiry.setTitle("Expiry");

        jcbAllowUrgent.setText("Allow urgent groups");
        jcbAllowUrgent.setEnabled(false);
        jcbAllowUrgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAllowUrgentActionPerformed(evt);
            }
        });

        jcbEnabled.setSelected(true);
        jcbEnabled.setText("Proposal is Enabled");
        jcbEnabled.setEnabled(false);

        jlblTimeUsed.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jlblTimeUsed.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlblTimeUsed.setText("Time Used Summary");

        jplPriorityOffsetPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jtfPriorityOffset.setText("0.00");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel12.setText("Priority Offset:");

        org.jdesktop.layout.GroupLayout jplPriorityOffsetPanelLayout = new org.jdesktop.layout.GroupLayout(jplPriorityOffsetPanel);
        jplPriorityOffsetPanel.setLayout(jplPriorityOffsetPanelLayout);
        jplPriorityOffsetPanelLayout.setHorizontalGroup(
            jplPriorityOffsetPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jplPriorityOffsetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jtfPriorityOffset, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
        );
        jplPriorityOffsetPanelLayout.setVerticalGroup(
            jplPriorityOffsetPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jplPriorityOffsetPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel12)
                .add(jtfPriorityOffset, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jcbAllowFixedGroups.setText("Allow Fixed groups");
        jcbAllowFixedGroups.setEnabled(false);
        jcbAllowFixedGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAllowFixedGroupsActionPerformed(evt);
            }
        });

        jbtnTargetsView.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jbtnTargetsView.setText("View Targets of ");
        jbtnTargetsView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnTargetsViewActionPerformed(evt);
            }
        });

        jbtnInstrumentConfigs.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jbtnInstrumentConfigs.setText("View Instrument Configs of ");
        jbtnInstrumentConfigs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnInstrumentConfigsActionPerformed(evt);
            }
        });

        jbtnValidate.setText("Validate Proposal");
        jbtnValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnValidateActionPerformed(evt);
            }
        });

        jbtnCancel.setForeground(new java.awt.Color(255, 0, 0));
        jbtnCancel.setText("Cancel");
        jbtnCancel.setEnabled(false);
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jbtnCreateGroup.setText("Create Group");
        jbtnCreateGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCreateGroupActionPerformed(evt);
            }
        });

        jplCodePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Code"));

        org.jdesktop.layout.GroupLayout jplCodePanelLayout = new org.jdesktop.layout.GroupLayout(jplCodePanel);
        jplCodePanel.setLayout(jplCodePanelLayout);
        jplCodePanelLayout.setHorizontalGroup(
            jplCodePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jplCodePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jtfCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jplCodePanelLayout.setVerticalGroup(
            jplCodePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jtfCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jtfInactiveCount.setEditable(false);
        jtfInactiveCount.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N

        jtfActiveCount.setEditable(false);
        jtfActiveCount.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jtfActiveCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfActiveCountActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel9.setText("Number of Inactive Groups:");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel7.setText("Number of Active Groups:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel7)
                    .add(jLabel9))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtfActiveCount)
                    .add(jtfInactiveCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {jtfActiveCount, jtfInactiveCount}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jLabel7)
                    .add(jtfActiveCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtfInactiveCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel1)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(jLabel14)
                                                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 281, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jbtnTargetsView, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jbtnInstrumentConfigs))
                                                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, dtepExpiry, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, dtepActivation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .add(0, 0, Short.MAX_VALUE)))
                                        .add(12, 12, 12))
                                    .add(layout.createSequentialGroup()
                                        .add(57, 57, 57)
                                        .add(jtfName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 476, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jLabel2)
                                            .add(jLabel4)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                .add(jLabel10)
                                                .add(jLabel3)))
                                        .add(29, 29, 29)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jtfTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 476, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(layout.createSequentialGroup()
                                                        .add(jtfTag, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 158, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(42, 42, 42)
                                                        .add(jLabel11))
                                                    .add(jcbRank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(layout.createSequentialGroup()
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                        .add(jplPriorityOffsetPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                    .add(layout.createSequentialGroup()
                                                        .add(6, 6, 6)
                                                        .add(jtfProgramme, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 211, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jbtnAccount)
                                    .add(jbtnValidate)
                                    .add(jcbAllowUrgent)
                                    .add(jbtnCreateGroup)
                                    .add(jcbEnabled)
                                    .add(jcbAllowFixedGroups)
                                    .add(jplCodePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jbtnEdit)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jbtnSubmit)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jbtnCancel))
                            .add(jlblTimeUsed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 426, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))))
        );

        layout.linkSize(new java.awt.Component[] {jbtnAccount, jbtnCreateGroup, jbtnValidate}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel2)
                                    .add(jtfName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel3)
                                    .add(jtfTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                                    .add(jLabel10)
                                    .add(jtfTag, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel11)
                                    .add(jtfProgramme, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel4)
                                    .add(jcbRank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jplPriorityOffsetPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(17, 17, 17)
                        .add(dtepActivation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jbtnAccount)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnValidate)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnCreateGroup)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jcbEnabled)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jcbAllowUrgent)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jcbAllowFixedGroups)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jplCodePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(dtepExpiry, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jbtnTargetsView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jbtnInstrumentConfigs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jlblTimeUsed)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jbtnEdit)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jbtnSubmit)
                        .add(jbtnCancel)))
                .add(100, 100, 100))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jbtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditActionPerformed
    // TODO add your handling code here:
    MainFrame.getInstance().displayMessage("Editing Proposal");
    setEnabled(true);
    MainFrame.getInstance().enableTrees(false);
}//GEN-LAST:event_jbtnEditActionPerformed

private void jbtnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSubmitActionPerformed
    String name, title, code;
    int priority = 0;
    boolean allowUrgentGroups;
    boolean proposalIsEnabled;
    boolean allowFixedGroups;

    name = jtfName.getText().trim();
    title = jtfTitle.getText().trim();
    
    switch (jcbRank.getSelectedIndex()) {
        case 0:
            priority = IProposal.PRIORITY_A;
            break;
        case 1:
            priority = IProposal.PRIORITY_B;
            break;
        case 2:
            priority = IProposal.PRIORITY_C;
            break;
        case 3:
            priority = IProposal.PRIORITY_Z;
            break;
    }
    
    allowUrgentGroups = jcbAllowUrgent.isSelected();
    proposalIsEnabled = jcbEnabled.isSelected();
    allowFixedGroups = jcbAllowFixedGroups.isSelected();

    if (name.length() == 0) {
        JOptionPane.showMessageDialog(this, "Please set a name for the proposal.");
        return;
    }

    String  priorityOffsetString = jtfPriorityOffset.getText();
    double priorityOffset = 0;
    try {
        priorityOffset = Double.parseDouble(priorityOffsetString);
        priorityOffset = Rounder.round(priorityOffset, 2);
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric value for priority offset.");
        return;
    }

    if ( (priorityOffset > 7d) | (priorityOffset < -7d) ) {
        JOptionPane.showMessageDialog(this, "Please enter a priority offset between the values +7 and -7.");
        return;
    }

    Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
    try {
       IProposal proposalWithName = phase2ModelClient.findProposal(name);
       if (proposalWithName != null) {
           if (proposalWithName.getID() != proposal.getID()) {
               //a different proposal exists with this id
               JOptionPane.showMessageDialog(this, "A different proposal exists with this name, please enter a different name.");
               return;
           }
       }
    } catch (Phase2Exception ex) {
        ex.printStackTrace();
        logger.error(ex);
        JOptionPane.showMessageDialog(this, "An error occurred accessing the Phase2 system, proposal not submitted");
        return;
    }

    long activationDate, expiryDate;
    try {
        activationDate = dtepActivation.getTime();
        expiryDate = dtepExpiry.getTime();
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(this, "Please enter dates in a valid format. Proposal not submitted.");
        return;
    }

    code = jtfCode.getText();
    
    allowFixedGroups = jcbAllowFixedGroups.isSelected();
    if (!allowFixedGroups) {
        try {
            //need to check that this proposal doesn't have fixed groups in it
            if (proposalHasFixedGroups()) {
                JOptionPane.showMessageDialog(this, "This proposal currently contains groups with fixed timing constraints, proposal not submitted");
                return;
            }
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, "An error occurred accessing the groups of the proposal, proposal not submitted");
            MainFrame.getInstance().enableTrees(true);
            return;
        }
    }

    long key = -1;

    XProposal xProposal = (XProposal) proposal;
    xProposal.setName(name);
    xProposal.setTitle(title);
    xProposal.setPriority(priority);
    xProposal.setScienceAbstract(proposal.getScienceAbstract());
    xProposal.setAllowUrgentGroups(allowUrgentGroups);
    xProposal.setEnabled(proposalIsEnabled);
    xProposal.setPriorityOffset(priorityOffset);
    xProposal.setActivationDate(activationDate);
    xProposal.setExpiryDate(expiryDate);
    xProposal.setAllowFixedGroups(allowFixedGroups);
    xProposal.setTypeCode(code);
    
    try {
        phase2ModelClient.updateProposal(xProposal, key);
        //make all sub groups non-urgent if urgent groups are not allowed.
        if (!allowUrgentGroups) {
            deUrgentiseGroupsOfProposal(xProposal.getID());
        }
        MainFrame.getInstance().displayMessage("Proposal Submitted.");
    } catch (Exception ex) {
        ex.printStackTrace();
        logger.error(ex);
        JOptionPane.showMessageDialog(this, "An error occurred accessing the Phase2 system, proposal not submitted");
        MainFrame.getInstance().enableTrees(true);
        return;
    }
    
    setEnabled(false);

    MainFrame.getInstance().enableTrees(true);
    MainFrame.getInstance().reloadSelectedNodeParent();
}//GEN-LAST:event_jbtnSubmitActionPerformed

private boolean proposalHasFixedGroups() throws Phase2Exception {
    //return true if proposal has groups within it which have fixed timing constraints
    Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
    List groupsList = phase2ModelClient.listGroups(proposal.getID(), true);
    Iterator i = groupsList.iterator();
    while (i.hasNext()) {
        IGroup group = (IGroup) i.next();
        ITimingConstraint timingConstraint =  group.getTimingConstraint();
        if (timingConstraint instanceof XFixedTimingConstraint) {
            return true;
        }
    }
    return false;
}

private void deUrgentiseGroupsOfProposal(long proposalId) throws Phase2Exception {
    logger.info("deUrgentiseGroupsOfProposal(" + proposalId + ")");

    Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
    List groupList = phase2ModelClient.listGroups(proposalId, true);
    Iterator i = groupList.iterator();
    while (i.hasNext()) {
        IGroup group = (IGroup) i.next();
        if (group.isUrgent()) {
            long groupId = group.getID();
            logger.info("phase2ModelClient.updateGroupUrgency(" + groupId + "," + false + ", 999" + ")");
            phase2ModelClient.updateGroupUrgency(groupId, false, 999);
        }
    }
}

private void jbtnAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAccountActionPerformed

    boolean allowAccountsEditing = Session.getInstance().getUser().isSuperUser();
    AccountsDialog dialog = new AccountsDialog(true, proposal, allowAccountsEditing);
    dialog.setVisible(true);
    
    //blocks 
    
    dialog.setVisible(false);
    dialog.dispose();
}//GEN-LAST:event_jbtnAccountActionPerformed

private void jtfActiveCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfActiveCountActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jtfActiveCountActionPerformed

private void jcbAllowUrgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAllowUrgentActionPerformed
    if (!jcbAllowUrgent.isSelected()) {
        JOptionPane.showMessageDialog(this, "De-selecting 'Allow urgent groups' will mark all groups in this proposal as non-urgent.");
    }
}//GEN-LAST:event_jcbAllowUrgentActionPerformed

private void jcbAllowFixedGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAllowFixedGroupsActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jcbAllowFixedGroupsActionPerformed

private void jbtnTargetsViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnTargetsViewActionPerformed
    TargetListDialog  targetListDialog = new TargetListDialog(program);
    targetListDialog.setVisible(true);

    //blocks

    targetListDialog.setVisible(false);
    targetListDialog.dispose();
}//GEN-LAST:event_jbtnTargetsViewActionPerformed

private void jbtnInstrumentConfigsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnInstrumentConfigsActionPerformed
    InstrumentConfigListDialog  instrumentConfigListDialog = new InstrumentConfigListDialog(program);
    instrumentConfigListDialog.setVisible(true);

    //blocks

    instrumentConfigListDialog.setVisible(false);
    instrumentConfigListDialog.dispose();
}//GEN-LAST:event_jbtnInstrumentConfigsActionPerformed

private void jbtnValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnValidateActionPerformed
    new ValidationFrame(proposal).setVisible(true);
}//GEN-LAST:event_jbtnValidateActionPerformed

private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
    //reload using proposal (which hasn't been mutated)
    MainFrame.getInstance().showHeaderPanel(new ProposalHeaderPanel(proposal));
    MainFrame.getInstance().enableTrees(true);
}//GEN-LAST:event_jbtnCancelActionPerformed

private void jbtnCreateGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCreateGroupActionPerformed

    NewGroupDialog dialog = new NewGroupDialog(true, proposal);
    dialog.setVisible(true);
    //blocks
    dialog.setVisible(false);
    dialog.dispose();
}//GEN-LAST:event_jbtnCreateGroupActionPerformed
    
public void setEnabled(boolean enabled) {
    jbtnEdit.setEnabled(!enabled);
    
    jcbRank.setEnabled(enabled);
    jbtnSubmit.setEnabled(enabled);
    jbtnCancel.setEnabled(enabled);
    dtepActivation.setEnabled(enabled);
    dtepExpiry.setEnabled(enabled);
    jcbAllowUrgent.setEnabled(enabled);
    jcbAllowFixedGroups.setEnabled(enabled);
    jcbEnabled.setEnabled(enabled);
    
    jtfName.setEditable(enabled);
    jcbRank.setEditable(enabled);
    jtfTitle.setEditable(enabled);
    jtfPriorityOffset.setEditable(enabled);
    jtfCode.setEditable(enabled);
    
    this.enabled = enabled;
}

public boolean isBeingEdited() {
        return enabled;
    }

    private void populateComponents() {
        
        dtepActivation.setEnabled(false);
        dtepExpiry.setEnabled(false);
        
        int priority = proposal.getPriority();

        switch (priority) {
            case IProposal.PRIORITY_A:
                jcbRank.setSelectedIndex(0); //A
                break;
            case IProposal.PRIORITY_B:
                jcbRank.setSelectedIndex(1); //B
                break;
            case IProposal.PRIORITY_C:
                jcbRank.setSelectedIndex(2); //C
                break;
            case IProposal.PRIORITY_Z:
                jcbRank.setSelectedIndex(3); //Z
                break;
        }

        //set the priority offset panel visibility dependent upon user type
        
        jtfPriorityOffset.setText(String.valueOf(proposal.getPriorityOffset()));

        jcbAllowUrgent.setSelected(proposal.allowsUrgentGroups());
        jcbEnabled.setSelected(proposal.isEnabled());
        jcbAllowFixedGroups.setSelected(proposal.allowsFixedGroups());

        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
       
        displayDate(proposal.getActivationDate(), DATE_TYPE_ACTIVATION);
        displayDate(proposal.getExpiryDate(), DATE_TYPE_EXPIRY);
        
        jtfName.setText(proposal.getName());
        jtfTitle.setText(proposal.getTitle());
        jtfCode.setText(proposal.getTypeCode());
        
        try {
            populateTimeUsedSummary();

            ITag tag = phase2ModelClient.getTagOfProposal(proposal.getID());
            jtfTag.setText(tag.getName());
            
            String programmeName = program.getName();
            jtfProgramme.setText(programmeName);
            jbtnTargetsView.setText(BTN_PREFIX_TARGETS_VIEW + programmeName);
            jbtnInstrumentConfigs.setText(BTN_PREFIX_INSTR_CFGS_VIEW + programmeName);

            int activeCount = phase2ModelClient.getNumberOfGroups(proposal.getID(), true);
            int inactiveCount = phase2ModelClient.getNumberOfGroups(proposal.getID(), false);
            jtfActiveCount.setText(String.valueOf(activeCount));
            jtfInactiveCount.setText(String.valueOf(inactiveCount));

            populateInvestigatorsList();

        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    private void populateTimeUsedSummary() throws Exception {
        AccountModelClient accountModelClient = new AccountModelClient(Const.PROPOSAL_ACCOUNT_SERVICE);
        ISemesterPeriod nowSemesterPeriod = accountModelClient.getSemesterPeriodOfDate(new Date().getTime());
        
        ISemester firstSemester = nowSemesterPeriod.getFirstSemester();
        ISemester secondSemester = nowSemesterPeriod.getSecondSemester();
        
        boolean shouldHighlight = false;
        String labelText = "";
        if (nowSemesterPeriod.isOverlap()) {
            //if we're in an overlap period we need to describe both semester periods of usage for this proposal
            TimeUsedTextDescription firstSemTimeUsed = getSemesterTimeUsedDescription(firstSemester);
            TimeUsedTextDescription secondSemTimeUsed = getSemesterTimeUsedDescription(secondSemester);
            shouldHighlight = (firstSemTimeUsed.containsANoAllocation && secondSemTimeUsed.containsANoAllocation);
            labelText = firstSemTimeUsed.semesterTimeUsedDescription + " :: " + secondSemTimeUsed.semesterTimeUsedDescription;
        } else {
            //we're not in an overlap, just describe the time used in the single semester
            TimeUsedTextDescription firstSemTimeUsed = getSemesterTimeUsedDescription(firstSemester);
            shouldHighlight = firstSemTimeUsed.containsANoAllocation;
            labelText = firstSemTimeUsed.semesterTimeUsedDescription;
        } 
        
         jlblTimeUsed.setText(labelText);

        if (shouldHighlight) {
            jlblTimeUsed.setForeground(Color.red);
        } else {
            jlblTimeUsed.setForeground(Color.blue);
        }   
    }

    private TimeUsedTextDescription getSemesterTimeUsedDescription(ISemester semester) throws Phase2Exception {

        TimeUsedTextDescription timeUsedTextDescription = new TimeUsedTextDescription();
        
        AccountModelClient accountModelClient = new AccountModelClient(Const.PROPOSAL_ACCOUNT_SERVICE);

        XAccount totalAccount = (XAccount) accountModelClient.findAccount(proposal.getID(), semester.getID());

        float allocated, consumed;

        if (totalAccount == null) {
            timeUsedTextDescription.containsANoAllocation = true;
            timeUsedTextDescription.semesterTimeUsedDescription = "No account for " + semester.getName();
            return timeUsedTextDescription;
        } 
        
        timeUsedTextDescription.containsANoAllocation = false;
        
        allocated = Rounder.round(totalAccount.getAllocated(), 2);
        consumed = Rounder.round(totalAccount.getConsumed(), 2);

        String allocatedPartStr = String.valueOf(allocated);
        String consumedPartStr = String.valueOf(consumed);

        int percentageComplete = (int)((consumed / allocated ) * 100);

        timeUsedTextDescription.semesterTimeUsedDescription = semester.getName() +  " : " + consumedPartStr + " hours used / " + allocatedPartStr + " hours allocated (" + percentageComplete + "% used)";

        return timeUsedTextDescription;
    }
    
    private void populateInvestigatorsList() throws Phase2Exception {
        AccessModelClient accessModelClient = AccessModelClient.getInstance();

        List accessPermissions = accessModelClient.listAccessPermissionsOnProposal(proposal.getID());
        Iterator i = accessPermissions.iterator();
        while (i.hasNext()) {
            IAccessPermission accessPermission = (IAccessPermission) i.next();
            long uid = accessPermission.getUserID();
            int role = accessPermission.getUserRole();
            IUser user = accessModelClient.getUser(uid);
            String userName = user.getFirstName() + " " + user.getLastName();
            String roleStr = "";
            switch (role) {
                case IAccessPermission.ASSISTANT_INVESTIGATOR_ROLE:
                    roleStr = "AI";
                    break;
                case IAccessPermission.CO_INVESTIGATOR_ROLE:
                    roleStr = "CoI";
                    break;
                case IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE:
                    roleStr = "PI";
                    break;
            }
            String displayString = roleStr + " : " + userName;
            String extantText = jtdInvestigators.getText().trim();
            if (extantText.length() != 0) {
                jtdInvestigators.setText(jtdInvestigators.getText() + "\n" +  displayString);
            } else {
                jtdInvestigators.setText(displayString);
            }
        }
    }
    /*
    public void displayMessage(final String message) {
        logger.info("displayMessage( " + message + ")");

        EventQueue.invokeLater(
                new Runnable() {
                    public void run() {
                        Document doc = jtpMessagePane.getDocument();
                        try {
                            doc.insertString(doc.getLength(), message, jtpMessagePane.getStyle("regular"));
                            doc.insertString(doc.getLength(), "\n",  jtpMessagePane.getStyle("regular"));
                            jtpMessagePane.setCaretPosition(jtpMessagePane.getDocument().getLength());
                        } catch(Exception e) {
                            e.printStackTrace();
                            logger.error(e);
                        }
                    }
                }
        );
    }
    */
    private void displayDate(long date, int dateType) {
        switch (dateType) {
            case DATE_TYPE_ACTIVATION:
                dtepActivation.setTime(date, false);
                break;
            case DATE_TYPE_EXPIRY:
                dtepExpiry.setTime(date, false);
                break;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ngat.beans.guibeans.DateTimeEditorPanel dtepActivation;
    private ngat.beans.guibeans.DateTimeEditorPanel dtepExpiry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtnAccount;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnCreateGroup;
    private javax.swing.JButton jbtnEdit;
    private javax.swing.JButton jbtnInstrumentConfigs;
    private javax.swing.JButton jbtnSubmit;
    private javax.swing.JButton jbtnTargetsView;
    private javax.swing.JButton jbtnValidate;
    private javax.swing.JCheckBox jcbAllowFixedGroups;
    private javax.swing.JCheckBox jcbAllowUrgent;
    private javax.swing.JCheckBox jcbEnabled;
    private javax.swing.JComboBox jcbRank;
    private javax.swing.JLabel jlblTimeUsed;
    private javax.swing.JPanel jplCodePanel;
    private javax.swing.JPanel jplPriorityOffsetPanel;
    private javax.swing.JTextArea jtdInvestigators;
    private javax.swing.JTextField jtfActiveCount;
    private javax.swing.JTextField jtfCode;
    private javax.swing.JTextField jtfInactiveCount;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfPriorityOffset;
    private javax.swing.JTextField jtfProgramme;
    private javax.swing.JTextField jtfTag;
    private javax.swing.JTextField jtfTitle;
    // End of variables declaration//GEN-END:variables
    
}

class TimeUsedTextDescription {
    
    public String semesterTimeUsedDescription;
    public boolean containsANoAllocation;
    
}