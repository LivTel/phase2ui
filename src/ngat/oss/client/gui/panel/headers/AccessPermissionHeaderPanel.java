/*
 * UserHeaderPanel.java
 *
 * Created on 05 December 2007, 10:16
 */
package ngat.oss.client.gui.panel.headers;

import ngat.oss.client.gui.panel.interfaces.IEditablePanel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.TreePath;
import ngat.oss.client.AccessModelClient;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.control.AdditionDeletionController;
import ngat.oss.client.gui.frame.MainFrame;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IAccessPermission;
import ngat.phase2.IProposal;
import ngat.phase2.IUser;
import ngat.phase2.XAccessPermission;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class AccessPermissionHeaderPanel extends javax.swing.JPanel  implements IEditablePanel {

    static Logger logger = Logger.getLogger(AccessPermissionHeaderPanel.class);

    private static final String PI_NAME = "PI";
    private static final String COI_NAME = "CoI";
        
    private boolean enabled;
    private IAccessPermission accessPermission;
    private IUser user;
    private IProposal proposal;
    private JTree tree;
    private TreePath treePath;

    /** Creates new form UserHeaderPanel */
    public AccessPermissionHeaderPanel(IAccessPermission accessPermission, JTree tree, TreePath treePath) {
        this.accessPermission = accessPermission;
        this.treePath = treePath;
        this.tree = tree;

        long userId = accessPermission.getUserID();
        long proposalId = accessPermission.getProposalID();
        try {
            user = AccessModelClient.getInstance().getUser(userId);
            proposal = Phase2ModelClient.getInstance().getProposal(proposalId);
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }

        initComponents();
        populateComponents();

        setEnabled(false);
        jbtnRevoke.setVisible(Session.getInstance().getUser().isSuperUser());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfUserName = new javax.swing.JTextField();
        jtfProposalName = new javax.swing.JTextField();
        jbtnRevoke = new javax.swing.JButton();
        jbtnEdit = new javax.swing.JButton();
        jbtnSubmit = new javax.swing.JButton();
        jcbRole = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        jLabel1.setText("Access Permission");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel4.setText("Proposal");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel2.setText("Users Name");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel3.setText("User Role");

        jtfUserName.setEditable(false);
        jtfUserName.setFont(new java.awt.Font("Lucida Grande", 0, 10));

        jtfProposalName.setEditable(false);
        jtfProposalName.setFont(new java.awt.Font("Lucida Grande", 0, 10));

        jbtnRevoke.setText("Revoke");
        jbtnRevoke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRevokeActionPerformed(evt);
            }
        });

        jbtnEdit.setText("Edit");
        jbtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditActionPerformed(evt);
            }
        });

        jbtnSubmit.setForeground(new java.awt.Color(255, 0, 0));
        jbtnSubmit.setText("Submit");
        jbtnSubmit.setEnabled(false);
        jbtnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSubmitActionPerformed(evt);
            }
        });

        jcbRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbRole.setEnabled(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jLabel2)
                            .add(jLabel3))
                        .add(59, 59, 59)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(jtfProposalName)
                                .add(jtfUserName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                            .add(jcbRole, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jbtnSubmit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jbtnEdit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jbtnRevoke, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel1)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(jtfUserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jbtnEdit))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jbtnSubmit)
                    .add(jcbRole, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jtfProposalName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnRevoke))
                .addContainerGap(229, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jbtnRevokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRevokeActionPerformed

    AdditionDeletionController  additionDeletionRevisionController = AdditionDeletionController.getInstance();
    additionDeletionRevisionController.deleteAccessPermission(accessPermission);
}//GEN-LAST:event_jbtnRevokeActionPerformed

private void jbtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditActionPerformed
// TODO add your handling code here:
    setEnabled(true);
    MainFrame.getInstance().displayMessage("Editing Access Permission");
    MainFrame.getInstance().enableTrees(false);
}//GEN-LAST:event_jbtnEditActionPerformed

private void jbtnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSubmitActionPerformed

    int originalRole = accessPermission.getUserRole(); //not changed yet

    XAccessPermission xaccessPermission = (XAccessPermission) accessPermission;
    int newUserRole = 0;
    switch (jcbRole.getSelectedIndex()) {
        case 0:
            newUserRole = IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE;
            break;
        case 1:
            newUserRole = IAccessPermission.CO_INVESTIGATOR_ROLE;
            break;
    }

    if (newUserRole == originalRole) {
        //no change made
        setEnabled(false);
        MainFrame.getInstance().enableTrees(true);
        return;
    }

    if (newUserRole == IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE) {
        try {
            ///user attempting to change role of user to PI
            //need to check that another PI isn't set up for this proposal
            long idOfCurrentPi = AccessModelClient.getInstance().getProposalPI(proposal.getID());
            if (idOfCurrentPi != -1) {
                if (idOfCurrentPi != user.getID()) {
                    JOptionPane.showMessageDialog(this, "Proposal: " + proposal.getName() + " already has a PI, submission failed.");
                    jcbRole.setSelectedItem(COI_NAME);
                    setEnabled(false);
                    MainFrame.getInstance().enableTrees(true);
                    return;
                } else {
                    //do nothing, this user is the PI anyway
                }
            } else {
                //do nothing, the proposal doesn't have a PI
            }
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, ex);
            MainFrame.getInstance().enableTrees(true);
            return;
        }
    }

    xaccessPermission.setUserRole(newUserRole);
    //change the role
    try {
        AccessModelClient.getInstance().updatePermission(accessPermission);
        //redisplay the object in treePath
        //treePath.
        tree.getModel().valueForPathChanged(treePath, accessPermission);
        tree.repaint();
        MainFrame.getInstance().displayMessage("Edit Submitted");
    } catch (Phase2Exception exception) {
        JOptionPane.showMessageDialog(this, exception.getMessage());
        MainFrame.getInstance().enableTrees(true);
        return;
    }
    
    setEnabled(false);

    MainFrame.getInstance().enableTrees(true);
    MainFrame.getInstance().reloadSelectedNodeParent();
}//GEN-LAST:event_jbtnSubmitActionPerformed
 
    public boolean isBeingEdited() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
            jcbRole.setEnabled(enabled);
            jbtnSubmit.setEnabled(enabled);
            this.enabled = enabled;
        }
    
    private void submitUserUpdate() {
        //TODO
    }
    
    private void populateComponents() {

        //only SU can revoke Access Permissions:
        jbtnRevoke.setVisible(Session.getInstance().getUser().isSuperUser());

        //temporary change:
        jbtnEdit.setVisible(Session.getInstance().getUser().isSuperUser());
        jbtnSubmit.setVisible(Session.getInstance().getUser().isSuperUser());
        
        jcbRole.removeAllItems();
        jcbRole.addItem(PI_NAME);
        jcbRole.addItem(COI_NAME);

        switch (accessPermission.getUserRole()) {
            case IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE:
                jcbRole.setSelectedIndex(0);
                break;
            case IAccessPermission.CO_INVESTIGATOR_ROLE:
                jcbRole.setSelectedIndex(1);
                break;
        }

        jtfUserName.setText(user.getFirstName() + " " + user.getLastName());
        jtfProposalName.setText(proposal.getName());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton jbtnEdit;
    private javax.swing.JButton jbtnRevoke;
    private javax.swing.JButton jbtnSubmit;
    private javax.swing.JComboBox jcbRole;
    private javax.swing.JTextField jtfProposalName;
    private javax.swing.JTextField jtfUserName;
    // End of variables declaration//GEN-END:variables
    
}
