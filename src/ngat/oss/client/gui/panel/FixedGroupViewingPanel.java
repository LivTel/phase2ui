/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StandardUserFixedGroupBookingPanel2.java
 *
 * Created on Feb 12, 2010, 9:19:51 AM
 */
package ngat.oss.client.gui.panel;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.EventObject;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.logging.Level;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import ngat.oss.client.AccessModelClient;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IAccessPermission;
import ngat.phase2.IProposal;
import ngat.phase2.ISequenceComponent;
import ngat.phase2.IUser;
import ngat.phase2.XFixedTimingConstraint;
import ngat.phase2.XGroup;
import ngat.phase2.util.TimeWrapper;
import ngat.sms.models.standard.StandardChargeAccountingModel;
import org.apache.log4j.Logger;

/**
 *
 * @author nrc
 */
public class FixedGroupViewingPanel extends javax.swing.JPanel {

    static Logger logger = Logger.getLogger(FixedGroupViewingPanel.class);

    private JTable jtblFixedGroupsViewTable = new javax.swing.JTable();

    private FixedGroupViewingTableModel fixedGroupVIewingTableModel;

    /**
     * Creates new form StandardUserFixedGroupBookingPanel2
     */
    public FixedGroupViewingPanel() {
        initComponents();
        initializeTable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnFixedGroupsRequest = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();

        jbtnFixedGroupsRequest.setText("Request the fixed groups list");
        jbtnFixedGroupsRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnFixedGroupsRequestActionPerformed(evt);
            }
        });

        jLabel1.setText("The query will take a few seconds to run.");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tableScrollPane)
                    .add(layout.createSequentialGroup()
                        .add(jbtnFixedGroupsRequest)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1)
                        .add(0, 195, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnFixedGroupsRequest, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initializeTable(boolean displayData) {

        fixedGroupVIewingTableModel = new FixedGroupViewingTableModel(displayData);

        jtblFixedGroupsViewTable.setModel(fixedGroupVIewingTableModel);

        tableScrollPane.setViewportView(jtblFixedGroupsViewTable);

        TableColumnModel tableColumnModel = jtblFixedGroupsViewTable.getColumnModel();

        TableColumn startCol = tableColumnModel.getColumn(0);
        TableColumn slackCol = tableColumnModel.getColumn(1);
        TableColumn execCol = tableColumnModel.getColumn(2);
        TableColumn groupCol = tableColumnModel.getColumn(3);
        TableColumn propCol = tableColumnModel.getColumn(4);
        TableColumn piCol = tableColumnModel.getColumn(5);

        startCol.setPreferredWidth(140);
        slackCol.setPreferredWidth(60);
        execCol.setPreferredWidth(110);
        groupCol.setPreferredWidth(80);
        propCol.setPreferredWidth(65);
        //piCol

        startCol.setResizable(false);
        slackCol.setResizable(false);
        execCol.setResizable(false);
        groupCol.setResizable(false);
        propCol.setResizable(false);
        //piCol

        /*
         FixedGroupDetailButtonRenderer fixedGroupDetailButtonRenderer = new FixedGroupDetailButtonRenderer();
         FixedGroupDetailButtonEditor fixedGroupDetailButtonEditor = new FixedGroupDetailButtonEditor(fixedGroupVIewingTableModel);

         buttonColumn.setCellRenderer(fixedGroupDetailButtonRenderer);
         buttonColumn.setCellEditor(fixedGroupDetailButtonEditor);
         */
    }

    private void jbtnFixedGroupsRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnFixedGroupsRequestActionPerformed

        initializeTable(true);
        if (fixedGroupVIewingTableModel.getData().size() == 0) {
            JOptionPane.showMessageDialog(this, "No fixed groups found");
        }
    }//GEN-LAST:event_jbtnFixedGroupsRequestActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbtnFixedGroupsRequest;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables

}

class FixedGroupViewingTableModel extends AbstractTableModel {

    public static final SimpleDateFormat DEFAULT_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    public static final SimpleTimeZone UTC = new SimpleTimeZone(0, "UTC");

    static Logger logger = Logger.getLogger(FixedGroupViewingTableModel.class);

    private List fixedGroupViewingTableLineList;

    public FixedGroupViewingTableModel(boolean populate) {
        DEFAULT_DATE_FORMAT.setLenient(false);
        DEFAULT_DATE_FORMAT.setTimeZone(UTC);
        DEFAULT_DATE_FORMAT.setDateFormatSymbols(new DateFormatSymbols(Locale.UK));

        if (!populate) {
            return;
        }

        Iterator i;
        fixedGroupViewingTableLineList = new ArrayList();

        try {
            List fixedGroupsList = Phase2ModelClient.getInstance().listActiveFixedGroups();

            Iterator fixedGrpListI = fixedGroupsList.iterator();

            while (fixedGrpListI.hasNext()) {

                XGroup group = (XGroup) fixedGrpListI.next();
                ISequenceComponent observationSequence = Phase2ModelClient.getInstance().getObservationSequenceOfGroup(group.getID());
                XFixedTimingConstraint fixedTimingConstraint = (XFixedTimingConstraint) group.getTimingConstraint();

                long startTime = fixedTimingConstraint.getStartTime();
                long slackmS = fixedTimingConstraint.getSlack();
                TimeWrapper slackWrapped = new TimeWrapper(slackmS);
                String slackStr = slackWrapped.getTimeAsString();
                
                IProposal proposal = Phase2ModelClient.getInstance().getProposalOfGroup(group.getID());

                List accessPermissions = AccessModelClient.getInstance().listAccessPermissionsOnProposal(proposal.getID());
                Iterator api = accessPermissions.iterator();
                String piName = "UNKNOWN";
                while (api.hasNext()) {
                    IAccessPermission accessPermission = (IAccessPermission) api.next();
                    if (accessPermission.getUserRole() == IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE) {
                        IUser user = AccessModelClient.getInstance().getUser(accessPermission.getUserID());
                        piName = user.getLastName() + "." + user.getFirstName();
                    }
                }

                StandardChargeAccountingModel standardChargeAccountingModel = new StandardChargeAccountingModel();

                long estimatedExecutionTimeMs = 0;
                try {
                    estimatedExecutionTimeMs = (long) standardChargeAccountingModel.calculateCost(observationSequence);
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error(e);
                }
                
                TimeWrapper estDurWrapped = new TimeWrapper(estimatedExecutionTimeMs);
                String estDurWrappedStr = estDurWrapped.getTimeAsString();
                
                //load the values into the list of FixedGroupViewingTableLine objects
                FixedGroupViewingTableLine fixedGroupViewingTableLine = new FixedGroupViewingTableLine();
                fixedGroupViewingTableLine.startDateStr = DEFAULT_DATE_FORMAT.format(new Date(startTime));
                fixedGroupViewingTableLine.slackStr = slackStr;
                fixedGroupViewingTableLine.estDurStr = estDurWrappedStr;
                fixedGroupViewingTableLine.grpNameStr = group.getName();
                fixedGroupViewingTableLine.propNameStr = proposal.getName();
                fixedGroupViewingTableLine.piNameStr = piName;

                fixedGroupViewingTableLineList.add(fixedGroupViewingTableLine);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + ex);
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    public boolean isCellEditable(int row, int col) {
        return true;
    }

    public List getData() {
        return fixedGroupViewingTableLineList;
    }

    public int getRowCount() {
        if (fixedGroupViewingTableLineList == null) {
            return 0;
        }
        return fixedGroupViewingTableLineList.size();
    }

    public int getColumnCount() {
        return 6;
    }

    public String getColumnName(int col) {
        switch (col) {
            case 0:
                return "Start time";
            case 1:
                return "Slack";
            case 2:
                return "Est exec. duration";
            case 3:
                return "Group name";
            case 4:
                return "Proposal";
            case 5:
                return "PI";

        }
        return "UNKNOWN";
    }

    public Object getValueAt(final int rowIndex, final int columnIndex) {

        FixedGroupViewingTableLine fixedGroupViewingTableLine = (FixedGroupViewingTableLine) fixedGroupViewingTableLineList.get(rowIndex);

        switch (columnIndex) {
            case 0: //start time
                return fixedGroupViewingTableLine.startDateStr;
            case 1: //slack
                return fixedGroupViewingTableLine.slackStr;
            case 2: //estimated execution duration
                return fixedGroupViewingTableLine.estDurStr;
            case 3: //group name
                return fixedGroupViewingTableLine.grpNameStr;
            case 4: //proposal
                return fixedGroupViewingTableLine.propNameStr;
            case 5: //PI
                return fixedGroupViewingTableLine.piNameStr;
            default:
                return "Error";
        }
    }
}

class FixedGroupViewingTableLine {

    public String startDateStr, slackStr, estDurStr, grpNameStr, propNameStr, piNameStr;

}

/*
 * // used to work
 class FixedGroupDetailButtonRenderer implements TableCellRenderer {        
 @Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
 final int rowF = row;
 final JButton button = new JButton("FixedGroupDetailButtonRenderer");
 button.addActionListener(new ActionListener() {
 public void actionPerformed(ActionEvent arg0) {
 JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(button), "Button clicked for row "+rowF);
 }
 });
 return button;
 }
 }
 */
class FixedGroupDetailButtonRenderer implements TableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        return FixedGroupDetailButtonFactory.createButton(null);
    }
}

class FixedGroupDetailButtonEditor extends AbstractCellEditor implements TableCellEditor {

    private FixedGroupViewingTableModel fixedGroupVIewingTableModel;

    /**
     * Creates new form AccountIncDecPanel
     */
    public FixedGroupDetailButtonEditor(FixedGroupViewingTableModel fixedGroupVIewingTableModel) {
        this.fixedGroupVIewingTableModel = fixedGroupVIewingTableModel;
    }

    public Object getCellEditorValue() {
        return "Details";
    }

    //required so that the table inserts the cell editor when a mouse click in a relavent cell occurs
    public boolean isCellEditable(EventObject eventObject) {
        return (Session.getInstance().getUser().isSuperUser());
    }

    public boolean shouldSelectCell(EventObject eventObject) {
        return (Session.getInstance().getUser().isSuperUser());
    }

    /*
     * //worked fine
     public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
     final int rowF = row;
     final JButton button = new JButton("FixedGroupDetailButtonEditor");
     button.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent arg0) {
     JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(button), "Button clicked for row "+rowF);
     }
     });
     return button;
     }
     */
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        XGroup group = (XGroup) fixedGroupVIewingTableModel.getData().get(row);
        return FixedGroupDetailButtonFactory.createButton(group);
    }
}

class FixedGroupDetailButtonFactory {

    public static JButton createButton(XGroup group) {
        final XGroup groupF = group;
        final JButton button = new JButton("Click for details");
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                try {
                    Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
                    AccessModelClient accessModelClient = AccessModelClient.getInstance();

                    long groupId = groupF.getID();
                    IProposal proposal = phase2ModelClient.getProposalOfGroup(groupId);

                    List accessPermissions = accessModelClient.listAccessPermissionsOnProposal(proposal.getID());
                    Iterator api = accessPermissions.iterator();
                    String piName = "UNKNOWN";
                    while (api.hasNext()) {
                        IAccessPermission accessPermission = (IAccessPermission) api.next();
                        if (accessPermission.getUserRole() == IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE) {
                            IUser user = accessModelClient.getUser(accessPermission.getUserID());
                            piName = user.getLastName() + "." + user.getFirstName();
                        }
                    }
                    String groupDetailString = "Group: " + groupF.getName() + ", Proposal: " + proposal.getName() + ", PI: " + piName;
                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(button), groupDetailString);
                } catch (Phase2Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
        return button;
    }
}
