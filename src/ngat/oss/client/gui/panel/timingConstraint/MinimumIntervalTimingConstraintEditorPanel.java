/*
 *
 * Created on April 17, 2009, 2:07 PM
 */

package ngat.oss.client.gui.panel.timingConstraint;

import ngat.oss.client.gui.panel.interfaces.ITimingConstraintPanel;
import ngat.phase2.ITimingConstraint;
import ngat.phase2.XMinimumIntervalTimingConstraint;

/**
 *
 * @author  nrc
 */
public class MinimumIntervalTimingConstraintEditorPanel extends javax.swing.JPanel implements ITimingConstraintPanel {

    private XMinimumIntervalTimingConstraint minimumIntervalTimingConstraint;
    private boolean enabled;
    private boolean isNewTimingConstraint;

    /** Creates new form  */
    public MinimumIntervalTimingConstraintEditorPanel(XMinimumIntervalTimingConstraint minimumIntervalTimingConstraint, boolean isNewTimingConstraint) {
        this.minimumIntervalTimingConstraint = minimumIntervalTimingConstraint;
        this.isNewTimingConstraint = isNewTimingConstraint;
        
        initComponents();
        populateComponents();
    }

    private void populateComponents() {
        dteEndDate.setTime(minimumIntervalTimingConstraint.getEnd(), isNewTimingConstraint);
        dteStartDate.setTime(minimumIntervalTimingConstraint.getStart(), isNewTimingConstraint);
        msepMinimumInterval.setTime(minimumIntervalTimingConstraint.getMinimumInterval());
        jtfMaxRepeats.setText(String.valueOf(minimumIntervalTimingConstraint.getMaximumRepeats()));
    }
    
    public ITimingConstraint getTimingConstraint()  {
        
        try {
            long endDate = dteEndDate.getTime();
            long startDate = dteStartDate.getTime();
            long minInterval = msepMinimumInterval.getTime();
            int maxRepeats = Integer.parseInt(jtfMaxRepeats.getText());

            minimumIntervalTimingConstraint.setEnd(endDate);
            minimumIntervalTimingConstraint.setStart(startDate);
            minimumIntervalTimingConstraint.setMinimumInterval(minInterval);
            minimumIntervalTimingConstraint.setMaximumRepeats(maxRepeats);

            return minimumIntervalTimingConstraint;
        } catch (Exception e) {
            return null;
        }
    }

    public boolean containsValidTimingConstraint() {
        try {
            long endDate = dteEndDate.getTime();
            long startDate = dteStartDate.getTime();
            long minInterval = msepMinimumInterval.getTime();
            int maxRepeats = Integer.parseInt(jtfMaxRepeats.getText());

            minimumIntervalTimingConstraint.setEnd(endDate);
            minimumIntervalTimingConstraint.setStart(startDate);
            minimumIntervalTimingConstraint.setMinimumInterval(minInterval);
            minimumIntervalTimingConstraint.setMaximumRepeats(maxRepeats);

            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        
        dteEndDate.setEnabled(enabled);
        dteStartDate.setEnabled(enabled);
        msepMinimumInterval.setEnabled(enabled);
        jtfMaxRepeats.setEnabled(enabled);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dteStartDate = new ngat.beans.guibeans.DateTimeEditorPanel();
        dteEndDate = new ngat.beans.guibeans.DateTimeEditorPanel();
        msepMinimumInterval = new ngat.beans.guibeans.MillisecondEditorPanel();
        jPanel1 = new javax.swing.JPanel();
        jtfMaxRepeats = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpHelpPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        dteStartDate.setBorder(javax.swing.BorderFactory.createTitledBorder("Start Date (YYYY/MM/DD HH:MM:SS)"));
        dteStartDate.setTitle("Start Date");

        dteEndDate.setBorder(javax.swing.BorderFactory.createTitledBorder("End Date (YYYY/MM/DD HH:MM:SS)"));
        dteEndDate.setTitle("End Date");

        msepMinimumInterval.setTitle("Interval");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Max. Repeats", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 12))); // NOI18N

        jtfMaxRepeats.setText("1");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jtfMaxRepeats, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(410, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jtfMaxRepeats, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jtpHelpPane.setEditable(false);
        jtpHelpPane.setText("This constraint creates repeated observations with a minimum interval between them. It is often preferable to a Monitor constraint for many programmes as it does not have the additional constraint of a Window.");
        jScrollPane1.setViewportView(jtpHelpPane);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        jLabel1.setText("Minimum Interval Timing Constraint");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(dteStartDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .add(dteEndDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .add(msepMinimumInterval, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dteStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dteEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(msepMinimumInterval, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jTextField1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ngat.beans.guibeans.DateTimeEditorPanel dteEndDate;
    private ngat.beans.guibeans.DateTimeEditorPanel dteStartDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtfMaxRepeats;
    private javax.swing.JTextPane jtpHelpPane;
    private ngat.beans.guibeans.MillisecondEditorPanel msepMinimumInterval;
    // End of variables declaration//GEN-END:variables

}
