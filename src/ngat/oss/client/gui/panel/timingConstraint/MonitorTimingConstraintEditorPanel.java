/*
 *
 * Created on April 17, 2009, 2:07 PM
 */

package ngat.oss.client.gui.panel.timingConstraint;

import ngat.oss.client.gui.panel.interfaces.ITimingConstraintPanel;
import ngat.phase2.ITimingConstraint;
import ngat.phase2.XMonitorTimingConstraint;

/**
 *
 * @author  nrc
 */
public class MonitorTimingConstraintEditorPanel extends javax.swing.JPanel implements ITimingConstraintPanel {
    
    private XMonitorTimingConstraint monitorTimingConstraint;
    private boolean enabled;
    private boolean isNewTimingConstraint;

    /** Creates new form  */
    public MonitorTimingConstraintEditorPanel(XMonitorTimingConstraint monitorTimingConstraint, boolean isNewTimingConstraint) {
        this.monitorTimingConstraint = monitorTimingConstraint;
        this.isNewTimingConstraint = isNewTimingConstraint;
        
        initComponents();
        populateComponents();
    }

    private void populateComponents() {
        dteEndDate.setTime(monitorTimingConstraint.getEndDate(), isNewTimingConstraint);
        dteStartDate.setTime(monitorTimingConstraint.getStartDate(), isNewTimingConstraint);
        msepPeriod.setTime(monitorTimingConstraint.getPeriod());
        msepWindow.setTime(monitorTimingConstraint.getWindow());
    }
    
    public ITimingConstraint getTimingConstraint()  {

        try {
            long endDate = dteEndDate.getTime();
            long startDate = dteStartDate.getTime();
            long period = msepPeriod.getTime();
            long window = msepWindow.getTime();

            monitorTimingConstraint.setEndDate(endDate);
            monitorTimingConstraint.setStartDate(startDate);
            monitorTimingConstraint.setPeriod(period);
            monitorTimingConstraint.setWindow(window);

            return monitorTimingConstraint;
        } catch (Exception e) {
            return null;
        }
    }

    public boolean containsValidTimingConstraint() {
        try {
            long endDate = dteEndDate.getTime();
            long startDate = dteStartDate.getTime();
            long period = msepPeriod.getTime();
            long window = msepWindow.getTime();

            monitorTimingConstraint.setEndDate(endDate);
            monitorTimingConstraint.setStartDate(startDate);
            monitorTimingConstraint.setPeriod(period);
            monitorTimingConstraint.setWindow(window);

            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        
        dteEndDate.setEnabled(enabled);
        dteStartDate.setEnabled(enabled);
        msepPeriod.setEnabled(enabled);
        msepWindow.setEnabled(enabled);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dteStartDate = new ngat.beans.guibeans.DateTimeEditorPanel();
        dteEndDate = new ngat.beans.guibeans.DateTimeEditorPanel();
        msepPeriod = new ngat.beans.guibeans.MillisecondEditorPanel();
        msepWindow = new ngat.beans.guibeans.MillisecondEditorPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpHelpPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        dteStartDate.setBorder(javax.swing.BorderFactory.createTitledBorder("Start Date (YYYY/MM/DD HH:MM:SS)"));
        dteStartDate.setTitle("Start Date");

        dteEndDate.setBorder(javax.swing.BorderFactory.createTitledBorder("End Date (YYYY/MM/DD HH:MM:SS)"));
        dteEndDate.setTitle("End Date");

        msepPeriod.setTitle("Period");

        msepWindow.setTitle("Window");

        jtpHelpPane.setEditable(false);
        jtpHelpPane.setText("The Window defines the total time interval (split half before and half after) that the group may start in.\n\nFor example, a Start Date with a time set to 22:00 with a Window of 10 minutes and a Period of 2 hours would start sometime between 21:55 and 22:05 and then between 23:55 and 00:05 etc.\n\nNote that setting small Window values limits the opportunities for scheduling a group and should generally be avoided unless strictly necessary.");
        jScrollPane1.setViewportView(jtpHelpPane);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        jLabel1.setText("Monitor Timing Constraint");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(dteStartDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .add(dteEndDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .add(msepPeriod, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .add(msepWindow, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dteStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dteEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(msepPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(msepWindow, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 174, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ngat.beans.guibeans.DateTimeEditorPanel dteEndDate;
    private ngat.beans.guibeans.DateTimeEditorPanel dteStartDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jtpHelpPane;
    private ngat.beans.guibeans.MillisecondEditorPanel msepPeriod;
    private ngat.beans.guibeans.MillisecondEditorPanel msepWindow;
    // End of variables declaration//GEN-END:variables

}
