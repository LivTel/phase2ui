/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AccountIncDecPanel.java
 *
 * Created on Nov 30, 2010, 3:40:04 PM
 */
package ngat.oss.client.gui.panel;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import ngat.oss.client.AccountModelClient;
import ngat.oss.client.gui.dialog.NewTransactionDialog;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.client.gui.wrapper.SemesterAccountWrapper;
import ngat.oss.client.gui.wrapper.TransactionWrapper;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IAccount;
import ngat.phase2.ISemester;
import ngat.phase2.util.Rounder;
import org.apache.log4j.Logger;

/**
 *
 * @author nrc
 */
public class AccountIncDecPanel extends javax.swing.JPanel {

    static Logger logger = Logger.getLogger(AccountIncDecPanel.class);

    private AccountModelClient accountModelClient;
    private int allocatedOrConsumedColumn;    // one of TransactionWrapper.ALLOCATED | CONSUMED
    private SemesterAccountWrapper semesterAccountWrapper;
    private DefaultTableModel tableModel;
    private TableCellEditor tableCellEditor;
    private JTable table;

    /** Creates new form AccountIncDecPanel */
    public AccountIncDecPanel(AccountModelClient accountModelClient, int allocatedOrConsumedColumn, SemesterAccountWrapper semesterAccountWrapper) {
        this.accountModelClient = accountModelClient;
        this.allocatedOrConsumedColumn = allocatedOrConsumedColumn;
        this.semesterAccountWrapper = semesterAccountWrapper;
        initComponents();
        populateComponents();
        jbtnDec.setEnabled(Session.getInstance().getUser().isSuperUser());
        jbtnInc.setEnabled(Session.getInstance().getUser().isSuperUser());
    }

    public AccountIncDecPanel(AccountModelClient accountModelClient, int allocatedOrConsumedColumn, DefaultTableModel tableModel, JTable table, TableCellEditor tableCellEditor, SemesterAccountWrapper semesterAccountWrapper) {
        this(accountModelClient, allocatedOrConsumedColumn, semesterAccountWrapper);
        this.tableModel = tableModel;
        this.table = table;
        this.tableCellEditor = tableCellEditor;

        jbtnDec.setEnabled(Session.getInstance().getUser().isSuperUser());
        jbtnInc.setEnabled(Session.getInstance().getUser().isSuperUser());
    }

    private void populateComponents() {

        IAccount account = semesterAccountWrapper.getAccount();

        String valueString;
        switch (allocatedOrConsumedColumn) {
            case TransactionWrapper.ALLOCATED_BALANCE_TYPE:
                valueString = String.valueOf(Rounder.round(((Double) account.getAllocated()).doubleValue(), 2));
                break;
            case TransactionWrapper.CONSUMED_BALANCE_TYPE:
                valueString = String.valueOf(Rounder.round(((Double) account.getConsumed()).doubleValue(), 2));
                break;
            default:
                valueString = "";
        }

        jtfValue.setText(valueString);

    }

    public SemesterAccountWrapper getSemesterAccountWrapper() {
        return semesterAccountWrapper;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnDec = new javax.swing.JButton();
        jbtnInc = new javax.swing.JButton();
        jtfValue = new javax.swing.JTextField();

        jbtnDec.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbtnDec.setText("-");
        jbtnDec.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbtnDec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDecActionPerformed(evt);
            }
        });

        jbtnInc.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbtnInc.setText("+");
        jbtnInc.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbtnInc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnIncActionPerformed(evt);
            }
        });

        jtfValue.setEditable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jtfValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbtnInc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbtnDec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jtfValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jbtnInc)
                .add(jbtnDec))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnDecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDecActionPerformed

        performAccountTransaction(semesterAccountWrapper, TransactionWrapper.DECREMENT);
}//GEN-LAST:event_jbtnDecActionPerformed

    private void jbtnIncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnIncActionPerformed

        performAccountTransaction(semesterAccountWrapper, TransactionWrapper.INCREMENT);
}//GEN-LAST:event_jbtnIncActionPerformed

    private void performAccountTransaction(SemesterAccountWrapper semesterAccountWrapper, int transactionType) {
        
        IAccount account = semesterAccountWrapper.getAccount();
        ISemester semester = semesterAccountWrapper.getSemester();

        NewTransactionDialog dialog = new NewTransactionDialog(true, semester, account, allocatedOrConsumedColumn, transactionType);
        dialog.setVisible(true);
        //blocks
        TransactionWrapper transactionWrapper = dialog.getTransactionWrapper();
        if (transactionWrapper == null) {
            return;
        }

        try {
            processTransaction(transactionWrapper);
            updateSemesterAccountWrapper(transactionWrapper);
            updateView(transactionWrapper);
        } catch (Phase2Exception e) {
            e.printStackTrace();
            logger.error(e);
            JOptionPane.showMessageDialog(this, e);
            return;
        }
    }

    private void processTransaction(TransactionWrapper transactionWrapper) throws Phase2Exception {

        //System.err.println("processTransaction(" + transactionWrapper + ")");

        long accountId = transactionWrapper.getAccountId();
        double amount = Rounder.round(transactionWrapper.getAmount(), 2);   //rounded to 2 decimal places

        int transactionType = transactionWrapper.getTransactionType();          //TransactionWrapper.INCREMENT | TransactionWrapper.DECREMENT
        String comment = transactionWrapper.getComment();
        String clientRef = transactionWrapper.getClientRef();

        //add transaction, alter accounts

        switch (allocatedOrConsumedColumn) {
            case TransactionWrapper.ALLOCATED_BALANCE_TYPE:
                switch (transactionType) {
                    case TransactionWrapper.INCREMENT:
                        accountModelClient.modifyAllocation(accountId, amount, comment, clientRef);
                        break;
                    case TransactionWrapper.DECREMENT:
                        amount = amount * -1;
                        accountModelClient.modifyAllocation(accountId, amount, comment, clientRef);
                        break;
                }
                break;
            case TransactionWrapper.CONSUMED_BALANCE_TYPE:
                switch (transactionType) {
                    case TransactionWrapper.INCREMENT:
                        accountModelClient.modifyConsumed(accountId, amount, comment, clientRef);
                        break;
                    case TransactionWrapper.DECREMENT:
                        amount = amount * -1;
                        accountModelClient.modifyConsumed(accountId, amount, comment, clientRef);
                        break;
                }
                break;
        }
    }

    private void updateView(TransactionWrapper transactionWrapper) {

        if (transactionWrapper == null) {
            return;
        }
        
        double amount = Rounder.round(transactionWrapper.getAmount(), 2);   //rounded to 2 decimal places
        int transactionType = transactionWrapper.getTransactionType();          //TransactionWrapper.INCREMENT | TransactionWrapper.DECREMENT
        double currentValue = 0, newValue = 0;

        switch (transactionType) {
            case TransactionWrapper.INCREMENT:
                currentValue = Double.parseDouble(jtfValue.getText());
                newValue = currentValue + amount;
                break;
            case TransactionWrapper.DECREMENT:
                currentValue = Double.parseDouble(jtfValue.getText());
                newValue = currentValue - amount;
                break;
        }
        double newValueRounded = Rounder.round(newValue, 2);
        final String valueString = String.valueOf(newValueRounded);

        //set the text box with the value
        jtfValue.setText(valueString);

        if (tableModel != null) {
            tableModel.fireTableDataChanged();
        }
        if (tableCellEditor != null) {
            tableCellEditor.stopCellEditing();
        }

        table.validate();
        table.repaint();
        
    }

    private void updateSemesterAccountWrapper(TransactionWrapper transactionWrapper) throws Phase2Exception {
        //reload the account and bung it back into the semester account wrapper
        //so that getSemesterAccountWrapper returns up-to-date 

        long accountId = transactionWrapper.getAccountId();
        IAccount account = accountModelClient.getAccount(accountId);
        semesterAccountWrapper.setAccount(account);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtnDec;
    private javax.swing.JButton jbtnInc;
    private javax.swing.JTextField jtfValue;
    // End of variables declaration//GEN-END:variables
}
