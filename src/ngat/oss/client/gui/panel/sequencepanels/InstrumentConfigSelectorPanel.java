/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InstrumentConfigPanel.java
 *
 * Created on Sep 9, 2009, 11:58:53 AM
 */
package ngat.oss.client.gui.panel.sequencepanels;

import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.dialog.NewInstrumentConfigDialog;
import ngat.oss.client.gui.panel.*;
import ngat.oss.client.gui.reference.CONST;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.client.gui.render.InstrumentConfigRenderer;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IExecutiveAction;
import ngat.phase2.IInstrumentConfig;
import ngat.phase2.IInstrumentConfigSelector;
import ngat.phase2.IProgram;
import ngat.phase2.ISequenceComponent;
import ngat.phase2.XExecutiveComponent;
import ngat.phase2.XInstrumentConfig;
import ngat.phase2.XInstrumentConfigSelector;
import org.apache.log4j.Logger;

/**
 *
 * @author nrc
 */
public class InstrumentConfigSelectorPanel extends javax.swing.JPanel implements SequenceComponentPanel {

    static Logger logger = Logger.getLogger(InstrumentConfigSelectorPanel.class);

    private List instrumentConfigList;
    private IProgram program;

    /**
     * Creates new form InstrumentConfigPanel
     */
    public InstrumentConfigSelectorPanel(IProgram program) {
        this.program = program;
        initComponents();
        
        //jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_CONFIGS));
        
        
        if (Session.getInstance().getUser().isSuperUser()) {
            jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_CONFIGS));
        } else {
            jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_CONFIGS_EXCEPT_LIRIC));
        }
        
        jcbInstrumentNameActionPerformed(null);
    }

    public InstrumentConfigSelectorPanel(XInstrumentConfigSelector instrumentConfigSelector, IProgram program) {
        this.program = program;
        initComponents();

        jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_CONFIGS));
        
        /*
        if (Session.getInstance().getUser().isSuperUser()) {
            jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_CONFIGS));
        } else {
            jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_CONFIGS_EXCEPT_IOI));
        }
        */
        
        populateComponents(instrumentConfigSelector);
    }

    private void populateComponents(XInstrumentConfigSelector instrumentConfigSelector) {

        IInstrumentConfig instrumentConfig = instrumentConfigSelector.getInstrumentConfig();
        String instrumentName = instrumentConfig.getInstrumentName();

        if (instrumentName != null) {
            if (instrumentName.equalsIgnoreCase(CONST.RATCAM)) {
                JOptionPane.showMessageDialog(this, "RATCam is no longer available");
            }
            if (instrumentName.equalsIgnoreCase(CONST.IO_THOR)) {
                JOptionPane.showMessageDialog(this, "THOR is no longer available");
            }
        }
        populateInstrumentConfigList(instrumentName);
        jcbInstrumentName.setSelectedItem(instrumentName);
        selectInstrumentConfig(instrumentConfig);
    }

    //return XExecutiveComponent
    public ISequenceComponent getSequenceComponent() {
        int iConfigIndex = jcbObsInstrumentConfig.getSelectedIndex();
        if (iConfigIndex == -1) {
            return null;
        }
        IInstrumentConfig instrumentConfig = (IInstrumentConfig) instrumentConfigList.get(iConfigIndex);
        IInstrumentConfigSelector instrumentConfigSelector = new XInstrumentConfigSelector(instrumentConfig);
        return new XExecutiveComponent(instrumentConfig.getName(), (IExecutiveAction) instrumentConfigSelector);
    }

    public boolean isValidData() {
        int iConfigIndex = jcbObsInstrumentConfig.getSelectedIndex();
        if (iConfigIndex == -1) {
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jcbInstrumentName = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jcbObsInstrumentConfig = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jbtnCreateNewInstrumentConfig = new javax.swing.JButton();

        jLabel10.setText("Instrument:");

        jcbInstrumentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbInstrumentNameActionPerformed(evt);
            }
        });

        jLabel11.setText("Instrument Config");
        jLabel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setText("or");

        jbtnCreateNewInstrumentConfig.setText("Create New Instrument Config");
        jbtnCreateNewInstrumentConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCreateNewInstrumentConfigActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel10)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jcbInstrumentName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 159, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel11)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jcbObsInstrumentConfig, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 477, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnCreateNewInstrumentConfig)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jcbInstrumentName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(jcbObsInstrumentConfig, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(jbtnCreateNewInstrumentConfig))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbInstrumentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbInstrumentNameActionPerformed

        String instrumentName = (String) jcbInstrumentName.getSelectedItem();

        //populate instrument config list dependent upon selected instrument name
        populateInstrumentConfigList(instrumentName);
}//GEN-LAST:event_jcbInstrumentNameActionPerformed


    private void selectInstrumentConfig(IInstrumentConfig instrumentConfig) {

        //System.err.println("selectInstrumentConfig(" + instrumentConfig + ")");
        //select the given instrument config in the gui
        //instrumentConfigList has been populated by populateInstrumentConfigList([String])
        Iterator i = instrumentConfigList.iterator();
        while (i.hasNext()) {
            IInstrumentConfig foundConfig = (IInstrumentConfig) i.next();
            if (foundConfig.getID() == instrumentConfig.getID()) {
                jcbObsInstrumentConfig.setSelectedItem(InstrumentConfigRenderer.getShortDescription(foundConfig));
                return;
            }
        }
    }

    //populate instrumentConfigList and jcbObsInstrumentConfig object with all instr cfgs of programme
    private void populateInstrumentConfigList() throws Phase2Exception {
        jcbObsInstrumentConfig.removeAllItems();
        instrumentConfigList = Phase2ModelClient.getInstance().listInstrumentConfigs(program.getID());
        Iterator ici = instrumentConfigList.iterator();
        while (ici.hasNext()) {
            IInstrumentConfig instrumentConfig = (IInstrumentConfig) ici.next();
            jcbObsInstrumentConfig.addItem(InstrumentConfigRenderer.getShortDescription(instrumentConfig));
            instrumentConfigList.add(instrumentConfig);
        }
    }

    //populate instrumentConfigList and jcbObsInstrumentConfig object with all instr cfgs of programme that are relevant to instrument: instrumentName
    private void populateInstrumentConfigList(String instrumentName) {
        jcbObsInstrumentConfig.removeAllItems();
        //clear the form held list
        instrumentConfigList = new Vector();
        List allInstrumentConfigsList;
        try {
            //get all the configs
            allInstrumentConfigsList = Phase2ModelClient.getInstance().listInstrumentConfigs(program.getID());
            Iterator ici = allInstrumentConfigsList.iterator();
            while (ici.hasNext()) {
                XInstrumentConfig instrumentConfig = (XInstrumentConfig) ici.next();
                if (instrumentConfig.getInstrumentName() == null) {
                    instrumentConfig.setInstrumentName("NULL");
                }
                if (instrumentConfig.getInstrumentName().equalsIgnoreCase(instrumentName)) {
                    //put in cbo and form held list if the instrument is right
                    jcbObsInstrumentConfig.addItem(InstrumentConfigRenderer.getShortDescription(instrumentConfig));
                    instrumentConfigList.add(instrumentConfig);
                }
            }
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    private int findIndexOfInstrumentConfig(IInstrumentConfig instrumentConfig) {
        //find index of instrumentConfig in  instrumentConfigList
        Iterator i = instrumentConfigList.iterator();
        int index = 0;
        while (i.hasNext()) {
            IInstrumentConfig instrumentConfigFound = (IInstrumentConfig) i.next();
            if (instrumentConfigFound.getName().equals(instrumentConfig.getName())) {
                return index;
            }
            index++;
        }
        return -1;
    }

    private void jbtnCreateNewInstrumentConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCreateNewInstrumentConfigActionPerformed

        String instrumentName = (String) jcbInstrumentName.getSelectedItem();
        NewInstrumentConfigDialog dialog = new NewInstrumentConfigDialog(true, instrumentName);
        dialog.setVisible(true);

        //blocks
        IInstrumentConfig instrumentConfig = dialog.getInstrumentConfig();
        dialog.setVisible(false);
        dialog.dispose();

        if (instrumentConfig == null) {
            return;
        }
        if (dialog.wasKilled()) {
            return;
        }
        try {
            Phase2ModelClient.getInstance().addInstrumentConfig(program.getID(), instrumentConfig);
            //populate instrument config list dependent upon selected instrument name
            instrumentName = (String) jcbInstrumentName.getSelectedItem();
            populateInstrumentConfigList(instrumentName);
            //select new instrument config in combo box
            jcbObsInstrumentConfig.setSelectedIndex(findIndexOfInstrumentConfig(instrumentConfig));
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
}//GEN-LAST:event_jbtnCreateNewInstrumentConfigActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JButton jbtnCreateNewInstrumentConfig;
    private javax.swing.JComboBox jcbInstrumentName;
    private javax.swing.JComboBox jcbObsInstrumentConfig;
    // End of variables declaration//GEN-END:variables

}
