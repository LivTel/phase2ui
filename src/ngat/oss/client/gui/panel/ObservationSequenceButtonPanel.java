/*
 * GroupHeaderPanel.java
 *
 * Created on 05 December 2007, 13:31
 */

package ngat.oss.client.gui.panel;

import java.rmi.RemoteException;
import javax.swing.JOptionPane;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.frame.CreateObservationSequenceFrame;
import ngat.oss.client.gui.frame.DisplayObservationSequenceFrame;
import ngat.oss.client.gui.frame.EditObservationSequenceFrame;
import ngat.oss.client.gui.frame.MainFrame;
import ngat.oss.client.gui.listeners.ObservationSequenceAddedListener;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IGroup;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class ObservationSequenceButtonPanel extends javax.swing.JPanel implements ObservationSequenceAddedListener {

    static Logger logger = Logger.getLogger(ObservationSequenceButtonPanel.class);

    private IGroup group;
    
    /** Creates new form GroupHeaderPanel */
    public ObservationSequenceButtonPanel(IGroup group) {
        this.group = group;
        initComponents();
        populateComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbDisplayObsSequence = new javax.swing.JButton();
        jbDeleteObsSequence = new javax.swing.JButton();
        jbNewObsSequence = new javax.swing.JButton();
        jbEditObsSequence = new javax.swing.JButton();

        jbDisplayObsSequence.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbDisplayObsSequence.setText("Display Observation Sequence");
        jbDisplayObsSequence.setEnabled(false);
        jbDisplayObsSequence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDisplayObsSequenceActionPerformed(evt);
            }
        });

        jbDeleteObsSequence.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbDeleteObsSequence.setText("Delete Observation Sequence");
        jbDeleteObsSequence.setEnabled(false);
        jbDeleteObsSequence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteObsSequenceActionPerformed(evt);
            }
        });

        jbNewObsSequence.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbNewObsSequence.setText("Create New Observation Sequence");
        jbNewObsSequence.setEnabled(false);
        jbNewObsSequence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewObsSequenceActionPerformed(evt);
            }
        });

        jbEditObsSequence.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jbEditObsSequence.setText("Edit Observation Sequence");
        jbEditObsSequence.setEnabled(false);
        jbEditObsSequence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditObsSequenceActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jbDisplayObsSequence, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jbEditObsSequence, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jbDeleteObsSequence, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jbNewObsSequence, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {jbDeleteObsSequence, jbDisplayObsSequence, jbNewObsSequence}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jbDisplayObsSequence)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbEditObsSequence)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbDeleteObsSequence)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbNewObsSequence)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jbDisplayObsSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDisplayObsSequenceActionPerformed
    MainFrame.getInstance().displayMessage("Displaying observation Sequence of Group " +  group.getName());
    
    java.awt.EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                new Thread(new Runnable() {
                                    public void run() {
                                        new DisplayObservationSequenceFrame(group).setVisible(true);
                                    }
                                }).start();
                            }
                        });
}//GEN-LAST:event_jbDisplayObsSequenceActionPerformed

private void jbDeleteObsSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteObsSequenceActionPerformed
// TODO add your handling code here:
    String msg = "Are you sure you want to delete the Observation Sequence?";
    String hdr = "Confirm Deletion";
    int response = JOptionPane.showConfirmDialog(null, msg, hdr, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (response == JOptionPane.OK_OPTION) {
        MainFrame.getInstance().displayMessage("Deleting observation Sequence of Group " +  group.getName());
        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
            try {
                phase2ModelClient.deleteObservationSequenceOfGroup(group.getID());
                JOptionPane.showMessageDialog(null, "Observation sequence deleted");
                MainFrame.getInstance().displayMessage("Observation sequence deleted");
                populateComponents();
            } catch (Phase2Exception ex) {
                ex.printStackTrace();
                logger.error(ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
    }
}//GEN-LAST:event_jbDeleteObsSequenceActionPerformed

private void jbNewObsSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewObsSequenceActionPerformed

    CreateObservationSequenceFrame createObservationSequenceFrame = null;
    try {
        createObservationSequenceFrame =  new CreateObservationSequenceFrame(group);
    } catch(Exception ex) {
        JOptionPane.showMessageDialog(this, "An error occurred whilst opening the Observation Frame");
        ex.printStackTrace();
        logger.error(ex);
        return;
    }
    
    createObservationSequenceFrame.addObservationSequenceAddedListener(this);
    createObservationSequenceFrame.setVisible(true);
}//GEN-LAST:event_jbNewObsSequenceActionPerformed

private void jbEditObsSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditObsSequenceActionPerformed
    MainFrame.getInstance().displayMessage("Displaying observation Sequence of Group " +  group.getName());

    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new Thread(new Runnable() {
                public void run() {
                    try {
                        new EditObservationSequenceFrame(group).setVisible(true);
                    } catch (Phase2Exception ex) {
                        JOptionPane.showMessageDialog(ObservationSequenceButtonPanel.this, "An error occurred whilst opening the Observation Frame");
                        ex.printStackTrace();
                        logger.error(ex);
                        return;
                    }
                }
            }).start();
        }
    });
}//GEN-LAST:event_jbEditObsSequenceActionPerformed

    public void receiveObservationSequenceAdded() {
        populateComponents();
    }

    private void populateComponents() {
        
        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
        try {
            boolean groupHasObsSequence = phase2ModelClient.groupHasObservationSequence(group.getID());
            jbDeleteObsSequence.setEnabled(groupHasObsSequence);
            jbDisplayObsSequence.setEnabled(groupHasObsSequence);
            jbEditObsSequence.setEnabled(groupHasObsSequence);
            jbNewObsSequence.setEnabled(!groupHasObsSequence);
        } catch (RemoteException ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbDeleteObsSequence;
    private javax.swing.JButton jbDisplayObsSequence;
    private javax.swing.JButton jbEditObsSequence;
    private javax.swing.JButton jbNewObsSequence;
    // End of variables declaration//GEN-END:variables


    
}
