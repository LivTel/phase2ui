/*
 * NewTimingConstraintDialog.java
 *
 * Created on April 30, 2009, 10:38 AM
 */
package ngat.oss.client.gui.dialog;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.model.InstrumentConfigListTableModel;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IGroup;
import ngat.phase2.IInstrumentConfig;
import ngat.phase2.IProgram;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class InstrumentConfigListDialog extends javax.swing.JDialog {

    static Logger logger = Logger.getLogger(InstrumentConfigListDialog.class);

    private static final String LINE_SEPERATOR = String.valueOf((char)10);
    
    private IProgram program;
    
    public  InstrumentConfigListDialog(IProgram program) {
        this.setModal(true);
        this.program = program;
        initComponents();
        
        centerFrame();
        addListeners();
        initComponents2();
        
        this.setTitle("Instrument configurations of programme: " + program.getName());

        loadInstrumentConfigListTable();
    }

    private void initComponents2() {

        if (jtblInstrumentConfigListTable.getColumnCount() >0 ) {
            jtblInstrumentConfigListTable.getColumnModel().getColumn(0).setPreferredWidth(80);
            jtblInstrumentConfigListTable.getColumnModel().getColumn(1).setPreferredWidth(80);
            jtblInstrumentConfigListTable.getColumnModel().getColumn(2).setPreferredWidth(15);
        }

        jbtnUsage.setVisible(Session.getInstance().getUser().isSuperUser());
    }

    private void centerFrame() {
        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();
        double hd = screenDimension.getHeight();
        double wd = screenDimension.getWidth();

        double yd = (hd - this.getBounds().getHeight()) / 2;
        double xd = (wd - this.getBounds().getWidth()) / 2;

        final int x = (int) xd;
        final int y = (int) yd;

        EventQueue.invokeLater(
                new Runnable() {

                    public void run() {
                        InstrumentConfigListDialog.this.setLocation(x, y);
                    }
                });
    }

    private void addListeners() {
        this.addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent e) {
                InstrumentConfigListDialog.this.setVisible(false);
                InstrumentConfigListDialog.this.dispose();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblInstrumentConfigListTable = new javax.swing.JTable();
        jbtnAddInstrumentConfig = new javax.swing.JButton();
        jbtnUpdateInstrumentConfig = new javax.swing.JButton();
        jbtnDeleteInstrumentConfig = new javax.swing.JButton();
        jbtnUsage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("");

        jbtnClose.setText("Close");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });

        jtblInstrumentConfigListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtblInstrumentConfigListTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jtblInstrumentConfigListTable);

        jbtnAddInstrumentConfig.setText("Add");
        jbtnAddInstrumentConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddInstrumentConfigActionPerformed(evt);
            }
        });

        jbtnUpdateInstrumentConfig.setText("Edit");
        jbtnUpdateInstrumentConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateInstrumentConfigActionPerformed(evt);
            }
        });

        jbtnDeleteInstrumentConfig.setText("Delete");
        jbtnDeleteInstrumentConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteInstrumentConfigActionPerformed(evt);
            }
        });

        jbtnUsage.setText("Usage");
        jbtnUsage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUsageActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 929, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jbtnAddInstrumentConfig)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnUpdateInstrumentConfig)
                        .add(5, 5, 5)
                        .add(jbtnUsage)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnDeleteInstrumentConfig)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnAddInstrumentConfig)
                    .add(jbtnUpdateInstrumentConfig, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnUsage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnDeleteInstrumentConfig)
                    .add(jbtnClose))
                .add(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


private void addInstrumentConfig(IInstrumentConfig instrumentConfig) {
    Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
    try {
        phase2ModelClient.addInstrumentConfig(program.getID(), instrumentConfig);
    } catch (Phase2Exception ex) {
        ex.printStackTrace();
        logger.error(ex);
    }
}

private void deleteInstrumentConfig(IInstrumentConfig instrumentConfig) {
    Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
    try {
        phase2ModelClient.deleteInstrumentConfig(instrumentConfig.getID());
    } catch (Phase2Exception ex) {
        ex.printStackTrace();
        logger.error(ex);
        return;
    }
    JOptionPane.showMessageDialog(this, "Instrument Config deleted");
}

private void updateInstrumentConfig(IInstrumentConfig instrumentConfig) {
    if (instrumentConfig == null) {
        return;
    }

    try {
         Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
         phase2ModelClient.updateInstrumentConfig(instrumentConfig, 999);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "instrument config  update failed: " + ex.getMessage());
        ex.printStackTrace();
        logger.error(ex);
    }
}

private void loadInstrumentConfigListTable() {
    InstrumentConfigListTableModel instrumentConfigListTableModel = new InstrumentConfigListTableModel(program);

    jtblInstrumentConfigListTable.setModel(instrumentConfigListTableModel);

    jtblInstrumentConfigListTable.validate();
    jtblInstrumentConfigListTable.repaint();
}


private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed

   this.setVisible(false);
   this.dispose();
}//GEN-LAST:event_jbtnCloseActionPerformed

private void jbtnAddInstrumentConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddInstrumentConfigActionPerformed
    NewInstrumentConfigDialog dialog = new NewInstrumentConfigDialog(true);
    dialog.setVisible(true);

    IInstrumentConfig instrumentConfig = dialog.getInstrumentConfig();

    dialog.setVisible(false);
    dialog.dispose();
    if (instrumentConfig == null) {
        return;
    }

    addInstrumentConfig(instrumentConfig);
  
    loadInstrumentConfigListTable();
}//GEN-LAST:event_jbtnAddInstrumentConfigActionPerformed


private void jbtnUpdateInstrumentConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateInstrumentConfigActionPerformed

    int selectedRow = jtblInstrumentConfigListTable.getSelectedRow();
    if (selectedRow == -1) {
        return;
    }
    InstrumentConfigListTableModel instrumentConfigListModel = (InstrumentConfigListTableModel) jtblInstrumentConfigListTable.getModel();
    if (instrumentConfigListModel != null) {
        IInstrumentConfig configSelected = instrumentConfigListModel.getInstrumentConfigInRow(selectedRow);

        EditInstrumentConfigDialog dialog = new EditInstrumentConfigDialog(configSelected, true);
        dialog.setVisible(true);

        configSelected = dialog.getInstrumentConfig();
        dialog.setVisible(false);
        dialog.dispose();

        updateInstrumentConfig(configSelected);

        loadInstrumentConfigListTable();
    }
}//GEN-LAST:event_jbtnUpdateInstrumentConfigActionPerformed

private void jbtnDeleteInstrumentConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteInstrumentConfigActionPerformed
    int selectedRow = jtblInstrumentConfigListTable.getSelectedRow();
    if (selectedRow == -1) {
        return;
    }
    InstrumentConfigListTableModel listModel = (InstrumentConfigListTableModel) jtblInstrumentConfigListTable.getModel();
    if (listModel != null) {
        IInstrumentConfig instrumentConfig = listModel.getInstrumentConfigInRow(selectedRow);

         int n = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete the selected instrument config?",
            "Delete?",
            JOptionPane.YES_NO_OPTION);

        if (n == JOptionPane.YES_OPTION) {
            try {
                List groupList = Phase2ModelClient.getInstance().listGroupsUsingInstrumentConfig(instrumentConfig);
                if (groupList != null) {
                    if (groupList.size() == 0) {
                        //target not used by any groups
                        deleteInstrumentConfig(instrumentConfig);
                        loadInstrumentConfigListTable();
                        return;
                    } else {
                        String msg;
                        if (Session.getInstance().getUser().isSuperUser()) {
                            msg = "The Instrument Config is used in the following groups:\n";
                            Iterator i = groupList.iterator();
                            while (i.hasNext()) {
                                IGroup group = (IGroup) i.next();
                                msg += "    " + group.getName() + "\n";
                            }
                            msg += "it will therefore not be deleted";
                        } else {
                            msg = "The Instrument Config is being used by " + groupList.size() + " Groups";
                            msg += "\nit will therefore not be deleted";
                        }

                        JOptionPane.showMessageDialog(this, msg);
                    }
                } else {
                    //group list is null, target not used by any groups
                    deleteInstrumentConfig(instrumentConfig);
                    loadInstrumentConfigListTable();
                    return;
                }
            } catch (Phase2Exception ex) {
                ex.printStackTrace();
                logger.error(ex);
                return;
            }
        }
    }
}//GEN-LAST:event_jbtnDeleteInstrumentConfigActionPerformed

private void jbtnUsageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUsageActionPerformed
    int selectedRow = jtblInstrumentConfigListTable.getSelectedRow();
    if (selectedRow == -1) {
        return;
    }

    InstrumentConfigListTableModel listModel = (InstrumentConfigListTableModel) jtblInstrumentConfigListTable.getModel();
    if (listModel != null) {
        IInstrumentConfig instrumentConfig = listModel.getInstrumentConfigInRow(selectedRow);
        try {
            List groupList = Phase2ModelClient.getInstance().listGroupsUsingInstrumentConfig(instrumentConfig);
            if (groupList != null) {
                if (groupList.size() == 0) {
                    String msg = "The instrument config is not being used by any groups.";
                    JOptionPane.showMessageDialog(this, msg);
                    return;
                } else {
                    String msg = "The instrument config is used in the following groups:\n";
                    Iterator i = groupList.iterator();
                    while (i.hasNext()) {
                        IGroup group = (IGroup) i.next();
                        msg += "    " + group.getName() + "\n";
                    }
                    JOptionPane.showMessageDialog(this, msg);
                }
            }
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            return;
        }
    }

}//GEN-LAST:event_jbtnUsageActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnAddInstrumentConfig;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnDeleteInstrumentConfig;
    private javax.swing.JButton jbtnUpdateInstrumentConfig;
    private javax.swing.JButton jbtnUsage;
    private javax.swing.JTable jtblInstrumentConfigListTable;
    // End of variables declaration//GEN-END:variables
}
