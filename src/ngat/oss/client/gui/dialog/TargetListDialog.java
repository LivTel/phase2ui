/*
 * NewTimingConstraintDialog.java
 *
 * Created on April 30, 2009, 10:38 AM
 */
package ngat.oss.client.gui.dialog;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.model.TargetListTableModel;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IGroup;
import ngat.phase2.IProgram;
import ngat.phase2.ITarget;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class TargetListDialog extends javax.swing.JDialog {

    static Logger logger = Logger.getLogger(TargetListDialog.class);

    private static final String LINE_SEPERATOR = String.valueOf((char) 10);
    private IProgram program;

    public TargetListDialog(IProgram program) {
        this.setModal(true);
        this.program = program;
        initComponents();

        centerFrame();
        addListeners();
        initComponents2();

        this.setTitle("Targets of programme: " + program.getName());

        loadTargetListTable();
    }

    private void initComponents2() {

        if (jtblTargetListTable.getColumnCount() > 0) {
            jtblTargetListTable.getColumnModel().getColumn(0).setPreferredWidth(80);
            jtblTargetListTable.getColumnModel().getColumn(1).setPreferredWidth(80);
            jtblTargetListTable.getColumnModel().getColumn(2).setPreferredWidth(15);
        }
    }

    private void centerFrame() {
        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();
        double hd = screenDimension.getHeight();
        double wd = screenDimension.getWidth();

        double yd = (hd - this.getBounds().getHeight()) / 2;
        double xd = (wd - this.getBounds().getWidth()) / 2;

        final int x = (int) xd;
        final int y = (int) yd;

        EventQueue.invokeLater(
                new Runnable() {

                    public void run() {
                        TargetListDialog.this.setLocation(x, y);
                    }
                });
    }

    private void addListeners() {
        this.addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent e) {
                TargetListDialog.this.setVisible(false);
                TargetListDialog.this.dispose();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblTargetListTable = new javax.swing.JTable();
        jbtnAddTarget = new javax.swing.JButton();
        jbtnUpdateTarget = new javax.swing.JButton();
        jbtnDeleteTarget = new javax.swing.JButton();
        jbtnUsage = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("");

        jbtnClose.setText("Close");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });

        jtblTargetListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtblTargetListTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jtblTargetListTable);

        jbtnAddTarget.setText("Add Target");
        jbtnAddTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddTargetActionPerformed(evt);
            }
        });

        jbtnUpdateTarget.setText("Edit Target");
        jbtnUpdateTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateTargetActionPerformed(evt);
            }
        });

        jbtnDeleteTarget.setText("Delete Target");
        jbtnDeleteTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteTargetActionPerformed(evt);
            }
        });

        jbtnUsage.setText("Usage of Target");
        jbtnUsage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUsageActionPerformed(evt);
            }
        });

        jButton1.setText("Add multiple Extra-Solar Targets");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jbtnAddTarget)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnUpdateTarget)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnUsage)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnDeleteTarget)
                        .add(31, 31, 31)
                        .add(jButton1)
                        .add(18, 18, 18)
                        .add(jbtnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnAddTarget)
                    .add(jbtnUpdateTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnDeleteTarget)
                    .add(jbtnUsage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1)
                    .add(jbtnClose))
                .add(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addTarget(ITarget target) {
        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
        try {
            phase2ModelClient.addTarget(program.getID(), target);
            JOptionPane.showMessageDialog(this, "Target [" + target.getName() + "] successfully added.");
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, "An error occurred on attempting to add the target .");
        }
    }

    private void deleteTarget(ITarget target) {
        Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
        try {
            phase2ModelClient.deleteTarget(target.getID());
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            return;
        }
        JOptionPane.showMessageDialog(this, "Target deleted");
    }

    private void updateTarget(ITarget target) {
        if (target == null) {
            return;
        }

        try {
            Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
            phase2ModelClient.updateTarget(target, 999);
            JOptionPane.showMessageDialog(this, "The target was successfully updated");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "target  update failed: " + ex.getMessage());
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    private void loadTargetListTable() {
        TargetListTableModel targetListModel = new TargetListTableModel(program);

        jtblTargetListTable.setModel(targetListModel);

        jtblTargetListTable.validate();
        jtblTargetListTable.repaint();
    }

private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed

    this.setVisible(false);
    this.dispose();
}//GEN-LAST:event_jbtnCloseActionPerformed

private void jbtnAddTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddTargetActionPerformed
    NewTargetDialog dialog = new NewTargetDialog(true);
    dialog.setVisible(true);

    ITarget target = dialog.getTarget();

    dialog.setVisible(false);
    dialog.dispose();
    if (target == null) {
        return;
    }

    addTarget(target);

    loadTargetListTable();
}//GEN-LAST:event_jbtnAddTargetActionPerformed

private void jbtnUpdateTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateTargetActionPerformed

    int selectedRow = jtblTargetListTable.getSelectedRow();
    if (selectedRow == -1 ) {
        return;
    }

    TargetListTableModel targetListModel = (TargetListTableModel) jtblTargetListTable.getModel();
    if (targetListModel != null) {
        ITarget targetSelected = targetListModel.getTargetInRow(selectedRow);

        EditTargetDialog dialog = new EditTargetDialog(targetSelected, true);
        dialog.setVisible(true);

        targetSelected = dialog.getTarget();
        dialog.setVisible(false);
        dialog.dispose();

        updateTarget(targetSelected);

        loadTargetListTable();
    }
}//GEN-LAST:event_jbtnUpdateTargetActionPerformed

private void jbtnDeleteTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteTargetActionPerformed
    int selectedRow = jtblTargetListTable.getSelectedRow();
    if (selectedRow == -1 ) {
        return;
    }
    
    TargetListTableModel targetListModel = (TargetListTableModel) jtblTargetListTable.getModel();
    if (targetListModel != null) {
        ITarget targetSelected = targetListModel.getTargetInRow(selectedRow);

        int n = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete the selected target?",
                "Delete?",
                JOptionPane.YES_NO_OPTION);

        if (n == JOptionPane.YES_OPTION) {
            try {
                List groupList = Phase2ModelClient.getInstance().listGroupsUsingTarget(targetSelected);
                if (groupList != null) {
                    if (groupList.size() == 0) {
                        //target not used by any groups
                        deleteTarget(targetSelected);
                        loadTargetListTable();
                        return;
                    } else {
                        String msg;
                        if (Session.getInstance().getUser().isSuperUser()) {
                            msg = "The Target is used in the following groups:\n";
                            Iterator i = groupList.iterator();
                            while (i.hasNext()) {
                                IGroup group = (IGroup) i.next();
                                msg += "    " + group.getName() + "\n";
                            }
                            msg += "it will therefore not be deleted";
                        } else {
                            msg = "The Target is being used by " + groupList.size() + " Groups";
                            msg += "\nit will therefore not be deleted";
                        }
                        
                        JOptionPane.showMessageDialog(this, msg);
                    }
                } else {
                    //group list is null, target not used by any groups
                    deleteTarget(targetSelected);
                    loadTargetListTable();
                    return;
                }
            } catch (Phase2Exception ex) {
                ex.printStackTrace();
                logger.error(ex);
                return;
            }
        }
    }
}//GEN-LAST:event_jbtnDeleteTargetActionPerformed

private void jbtnUsageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUsageActionPerformed
    int selectedRow = jtblTargetListTable.getSelectedRow();
    if (selectedRow == -1) {
        return;
    }

    TargetListTableModel listModel = (TargetListTableModel) jtblTargetListTable.getModel();
    if (listModel != null) {
        ITarget target = listModel.getTargetInRow(selectedRow);
        try {
            List groupList = Phase2ModelClient.getInstance().listGroupsUsingTarget(target);
            if (groupList != null) {
                if (groupList.size() == 0) {
                    String msg = "The Target is not being used by any Groups.";
                    JOptionPane.showMessageDialog(this, msg);
                    return;
                } else {
                    String msg = "The Target is used in the following Groups:\n";
                    Iterator i = groupList.iterator();
                    while (i.hasNext()) {
                        IGroup group = (IGroup) i.next();
                        msg += "    " + group.getName() + "\n";
                    }
                    JOptionPane.showMessageDialog(this, msg);
                }
            }
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            return;
        }
    }
}//GEN-LAST:event_jbtnUsageActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    MultipleTargetEntryDialog  multipleTargetEntryDialog1 = new MultipleTargetEntryDialog(program);
    multipleTargetEntryDialog1.setVisible(true);

    //blocks

    multipleTargetEntryDialog1.setVisible(false);
    multipleTargetEntryDialog1.dispose();

    //reload the target list
    loadTargetListTable();
}//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnAddTarget;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnDeleteTarget;
    private javax.swing.JButton jbtnUpdateTarget;
    private javax.swing.JButton jbtnUsage;
    private javax.swing.JTable jtblTargetListTable;
    // End of variables declaration//GEN-END:variables
}
