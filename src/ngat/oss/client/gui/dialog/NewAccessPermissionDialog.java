/*
 * NewTimingConstraintDialog.java
 *
 * Created on April 30, 2009, 10:38 AM
 */
package ngat.oss.client.gui.dialog;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import ngat.jibxsoap.StringTypeParameter;
import ngat.oss.client.AccessModelClient;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.frame.MainFrame;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IAccessPermission;
import ngat.phase2.IProgram;
import ngat.phase2.IProposal;
import ngat.phase2.ITag;
import ngat.phase2.IUser;
import ngat.phase2.XAccessPermission;

/**
 *
 * @author  nrc
 */
public class NewAccessPermissionDialog extends javax.swing.JDialog implements ActionListener {

    private IUser user = null;

    public NewAccessPermissionDialog(boolean modal, IUser user) {
        this.user = user;
        this.setModal(modal);
        initComponents();
        initComponents2();
        centerFrame();
        addListeners();
    }

    private void initComponents2() {
        jtfUserName.setText(user.getName());
        
        populateProposalList(true);
    }
    
    private void populateProposalList(boolean limitToProposalsWithoutPIs) {

        jlblPIInfo.setVisible(limitToProposalsWithoutPIs);
        
        jcbProposals.removeAllItems();
        try {
            List progList = Phase2ModelClient.getInstance().listProposalNames(limitToProposalsWithoutPIs);
            Iterator i = progList.iterator();
            while (i.hasNext()) {
                StringTypeParameter proposalName = (StringTypeParameter)i.next();
                jcbProposals.addItem(proposalName.getStringValue());
            }
        } catch (Phase2Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            JOptionPane.showMessageDialog(this, "cannot populate programme list");
            this.setVisible(false);
            this.dispose();
        }
    }
    
    private void centerFrame() {
        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();
        double hd = screenDimension.getHeight();
        double wd = screenDimension.getWidth();

        double yd = (hd - this.getBounds().getHeight()) / 2;
        double xd = (wd - this.getBounds().getWidth()) / 2;

        final int x = (int) xd;
        final int y = (int) yd;

        EventQueue.invokeLater(
                new Runnable() {

                    public void run() {
                        NewAccessPermissionDialog.this.setLocation(x, y);
                    }
                });
    }

    private void addListeners() {
        this.addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent e) {
                NewAccessPermissionDialog.this.setVisible(false);
                NewAccessPermissionDialog.this.dispose();
            }
        });
    }

    public void actionPerformed(ActionEvent actionEvent) {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnCreate = new javax.swing.JButton();
        jbtnCancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfUserName = new javax.swing.JTextField();
        jcbRole = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jcbProposals = new javax.swing.JComboBox();
        jlblPIInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create New Access Permission");

        jbtnCreate.setForeground(new java.awt.Color(255, 0, 0));
        jbtnCreate.setText("Create");
        jbtnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCreateActionPerformed(evt);
            }
        });

        jbtnCancel.setText("Cancel");
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel4.setText("Proposal");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel2.setText("Users Name");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel3.setText("User Role");

        jtfUserName.setEditable(false);
        jtfUserName.setFont(new java.awt.Font("Lucida Grande", 0, 10));

        jcbRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PI", "CoI" }));
        jcbRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRoleActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        jLabel1.setText("Access Permission");

        jcbProposals.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlblPIInfo.setText("(Only proposals without a PI are listed)");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel2)
                                    .add(jLabel3)
                                    .add(jLabel4))
                                .add(59, 59, 59)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jcbRole, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(jcbProposals, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jlblPIInfo))
                                    .add(jtfUserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 257, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(jbtnCreate)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jbtnCancel))))
                    .add(jLabel1))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jtfUserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jcbRole, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jcbProposals, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblPIInfo))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnCancel)
                    .add(jbtnCreate))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

private void jbtnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCreateActionPerformed

    String proposalName = (String)jcbProposals.getSelectedItem();
    String selectedRole = (String) jcbRole.getSelectedItem();
    int role;
    if (selectedRole.equalsIgnoreCase("PI")) {
        role = IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE;
    } else if (selectedRole.equalsIgnoreCase("CoI")) {
        role = IAccessPermission.CO_INVESTIGATOR_ROLE;
    } else {
        JOptionPane.showMessageDialog(this, "Unable todefina role from selection");
        role = -1;
        return;
    }
    
    XAccessPermission xAccessPermission;
    try {
        IProposal proposal = Phase2ModelClient.getInstance().findProposal(proposalName);
        if (proposal == null) {
            JOptionPane.showMessageDialog(this, "Unable to find proposal with name " + proposalName + ", update failed");
            return;
        }
        //make sure that user hasn't already got some sort of AccessPermission on this proposal.
        IAccessPermission extantPermission = AccessModelClient.getInstance().getAccessPermission(user.getID(), proposal.getID());
        if (extantPermission != null) {
            String permissionDescriptionString = "";
            switch (extantPermission.getUserRole()) {
                case IAccessPermission.ASSISTANT_INVESTIGATOR_ROLE:
                    permissionDescriptionString = "an AI";
                    break;
                case IAccessPermission.CO_INVESTIGATOR_ROLE:
                    permissionDescriptionString = "a CoI";
                    break;
                case IAccessPermission.PRINCIPLE_INVESTIGATOR_ROLE:
                    permissionDescriptionString = "a PI";
                    break;
            }
            JOptionPane.showMessageDialog(this, "The user " + user.getName() + " is already " + permissionDescriptionString + " on proposal " + proposal.getName());
            return;
        }

        xAccessPermission = new XAccessPermission();
        xAccessPermission.setProposalID(proposal.getID());
        xAccessPermission.setUserID(user.getID());
        xAccessPermission.setUserRole(role);
        long aid = AccessModelClient.getInstance().addPermission(xAccessPermission);
        xAccessPermission.setID(aid);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e.getMessage());
        JOptionPane.showMessageDialog(this, "Create Access Permission failed");
        return;
    }
    
    this.setVisible(false);
    this.dispose();

    MainFrame.getInstance().receiveNewTreeObject(xAccessPermission);
}//GEN-LAST:event_jbtnCreateActionPerformed

private boolean proposalExists(String proposalName, long programmeId) throws Phase2Exception {
    boolean proposalExists = Phase2ModelClient.getInstance().proposalExists(proposalName, programmeId);
    return proposalExists;
}

private long  getTagId(String tagName) throws Phase2Exception {
    ITag tag = Phase2ModelClient.getInstance().findTag(tagName);
    return tag.getID();
}

private long getProgId(String progName) throws Phase2Exception {
    IProgram program = Phase2ModelClient.getInstance().findProgram(progName);
    return program.getID();
}

private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
    this.setVisible(false);
    this.dispose();

}//GEN-LAST:event_jbtnCancelActionPerformed

private void jcbRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRoleActionPerformed

    if (jcbRole.getSelectedItem().equals("PI")) {
        populateProposalList(true);
    } else {
        populateProposalList(false);
    }

}//GEN-LAST:event_jcbRoleActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnCreate;
    private javax.swing.JComboBox jcbProposals;
    private javax.swing.JComboBox jcbRole;
    private javax.swing.JLabel jlblPIInfo;
    private javax.swing.JTextField jtfUserName;
    // End of variables declaration//GEN-END:variables
}
