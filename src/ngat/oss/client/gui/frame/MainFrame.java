/*
 * MainFrame2.java
 *
 * Created on September 18, 2008, 11:32 AM
 */
package ngat.oss.client.gui.frame;

import javax.swing.event.ChangeEvent;
import ngat.oss.client.gui.reference.VersionInfoFrame;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.event.ChangeListener;
import javax.swing.text.Document;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import ngat.oss.client.gui.panel.interfaces.IEditablePanel;
import ngat.oss.client.gui.tree.datatree.DataTreeFactory;
import ngat.oss.client.gui.reference.CONST;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.client.gui.tree.datatree.DataTreeChildrenLoader;
import ngat.oss.client.gui.tree.datatree.DataTreeNodeSelector;
import ngat.oss.client.gui.util.FrameCenterer;
import ngat.phase2.IPhase2Identity;
import org.apache.log4j.Logger;

/**
 *
 * @author  nrc
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener {

    static Logger logger = Logger.getLogger(MainFrame.class);

    private static final String ACTION_CMD_CLOSE = "CLOSE";
    //private static final String ACTION_CMD_FIXED_GROUP_BOOKINGS = "FIXED_GROUP_BOOKINGS"; //no longer used
    private static final String ACTION_CMD_FUTURE_FIXED_GROUPS = "ACTION_CMD_FUTURE_FIXED_GROUPS";
    private static final String ACTION_CMD_ACTIVE_GROUPS = "ACTIVE_GROUPS";
    private static final String ACTION_CMD_VERSION_INFORMATION = "VERSION_INFORMATION";
    private static final String ACTION_CMD_SEMESTER_ACCOUNTS = "SEMESTER_ACCOUNTS";
    
    //tools menu action commands
    private static final String ACTION_CMD_ROT_ANGLE_CHART = "ROT_ANGLE_CHART";
    
    private static MainFrame instance = null;
    private ArrayList allTrees = new ArrayList();
    private IEditablePanel currentEditingPanel;

    public static MainFrame getInstance() {
        if (instance == null) {
            instance = new MainFrame();
        }
        return instance;
    }

    /** Creates new form MainFrame2 */
    private MainFrame() {
        initComponents();
        setSize(CONST.MAIN_FRAME_SIZE);
        new FrameCenterer(this).start();
        LoginFrame.getInstance().setVisible(false);
        initComponents2();
    }

    public void showMessages() {
        if (!Session.getInstance().getUser().isSuperUser()) {
            //is PI, show PI text
            String message;
            message = "Expand either tree to access proposals.";
            message += "\nRight click a proposal to add groups.";
            displayMessage(message);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDetailPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpMessagePane = new javax.swing.JTextPane();
        jpControlPanel = new javax.swing.JPanel();
        jTabbedTreePane = new javax.swing.JTabbedPane();
        jcbIncludeInactiveGroups = new javax.swing.JCheckBox();
        jMenuBar = new javax.swing.JMenuBar();
        jmFileMenu = new javax.swing.JMenu();
        JMenuItem closeMenuItem = new JMenuItem("Close");
        closeMenuItem.setActionCommand(ACTION_CMD_CLOSE);
        closeMenuItem.addActionListener(this);
        jmFileMenu.add(closeMenuItem);
        jmViewMenu = new javax.swing.JMenu();
        jmToolsMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(CONST.APP_NAME + " (" + CONST.CURRENT_VERSION_NUMBER.getDisplayName() + CONST.CURRENT_REVISION_LETTER + ")"+ " [" + Session.getInstance().getServiceHostName() + "]");
        setResizable(false);

        jpDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpDetailPanel.setLayout(new java.awt.CardLayout());

        jScrollPane2.setViewportView(jtpMessagePane);

        jpControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpControlPanel.setLayout(new java.awt.BorderLayout());

        jcbIncludeInactiveGroups.setSelected(true);
        jcbIncludeInactiveGroups.setText("Include disabled groups in tree.");
        jcbIncludeInactiveGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbIncludeInactiveGroupsActionPerformed(evt);
            }
        });

        jmFileMenu.setText("File");
        jMenuBar.add(jmFileMenu);

        JMenuItem viewFixedGroupBookingsMenuItem = new JMenuItem("Future Fixed Groups");
        viewFixedGroupBookingsMenuItem.setActionCommand(ACTION_CMD_FUTURE_FIXED_GROUPS);
        viewFixedGroupBookingsMenuItem.addActionListener(this);
        jmViewMenu.add(viewFixedGroupBookingsMenuItem);

        if (Session.getInstance().getUser().isSuperUser()) {
            JMenuItem viewGroupsMenuItem = new JMenuItem("Active Groups");
            viewGroupsMenuItem.setActionCommand(ACTION_CMD_ACTIVE_GROUPS);
            viewGroupsMenuItem.addActionListener(this);
            jmViewMenu.add(viewGroupsMenuItem);
        }

        JMenuItem viewVersionInfoMenuItem = new JMenuItem("Version Information");
        viewVersionInfoMenuItem.setActionCommand(ACTION_CMD_VERSION_INFORMATION);
        viewVersionInfoMenuItem.addActionListener(this);
        jmViewMenu.add(viewVersionInfoMenuItem);
        jmViewMenu.setText("View");
        jMenuBar.add(jmViewMenu);

        JMenuItem rotAngleMenuItem = new JMenuItem("Rotator Angle Chart");
        rotAngleMenuItem.setActionCommand(ACTION_CMD_ROT_ANGLE_CHART);
        rotAngleMenuItem.addActionListener(this);
        jmToolsMenu.add(rotAngleMenuItem);

        if (Session.getInstance().getUser().isSuperUser()) {
            JMenuItem accountsMenuItem = new JMenuItem("Semester Accounts");
            accountsMenuItem.setActionCommand(ACTION_CMD_SEMESTER_ACCOUNTS);
            accountsMenuItem.addActionListener(this);
            jmToolsMenu.add(accountsMenuItem);
        }
        jmToolsMenu.setText("Tools");
        jMenuBar.add(jmToolsMenu);

        setJMenuBar(jMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 502, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jpControlPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jcbIncludeInactiveGroups)
                            .add(jTabbedTreePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jpDetailPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jTabbedTreePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 482, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jcbIncludeInactiveGroups))
                    .add(jpDetailPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 502, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(13, 13, 13)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpControlPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbIncludeInactiveGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbIncludeInactiveGroupsActionPerformed
        /*
        int selectedPane = jTabbedTreePane.getSelectedIndex();
        initialiseTreeTabbedPane();
        selectTabbedPane(selectedPane);
        */

        JTree selectedTree = getSelectedTree();
        DefaultTreeModel treeModel = (DefaultTreeModel) selectedTree.getModel();
        DefaultMutableTreeNode rootNode =  (DefaultMutableTreeNode) treeModel.getRoot();
        DataTreeChildrenLoader dataTreeChildrenLoader = new DataTreeChildrenLoader(selectedTree);
        dataTreeChildrenLoader.loadNodeChildren(rootNode);
        
    }//GEN-LAST:event_jcbIncludeInactiveGroupsActionPerformed

    //a new object has been successfully added to the database
    //now load (in fact re-load) the children of the selected node in the JTree
    //because that's the parent node of the added node
    //then inform the treeModel of the update and select the node in the tree
    public void receiveNewTreeObject(IPhase2Identity phase2Object) {

        JTree selectedTree = getSelectedTree();
        TreePath selectedPath = selectedTree.getSelectionPath();
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) selectedPath.getLastPathComponent();

        //swing operations:
        DataTreeChildrenLoader dataTreeChildrenLoader = new DataTreeChildrenLoader(selectedTree);
        dataTreeChildrenLoader.loadNodeChildren(selectedNode);

        DataTreeNodeSelector dataTreeNodeSelector = new DataTreeNodeSelector(selectedNode, selectedTree);
        dataTreeNodeSelector.selectNodeOfUserObject(phase2Object);
    }

    public void receiveTreeObjectDeleted() {
        //the object has been deleted from the selectedNode
        //need to reload the selected nodes parent

        //System.err.println("receiveTreeObjectDelected()");

        JTree selectedTree = getSelectedTree();
        TreePath selectedPath = selectedTree.getSelectionPath();
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) selectedPath.getLastPathComponent();
        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();

        DataTreeChildrenLoader dataTreeChildrenLoader = new DataTreeChildrenLoader(selectedTree);
        dataTreeChildrenLoader.loadNodeChildren(parentNode);

        //select the parent node
        selectedTree.setSelectionPath(new TreePath(parentNode));
    }

    public void reloadSelectedNodeParent() {
        JTree selectedTree = getSelectedTree();

        if (selectedTree == null) {
            return;
        }

        TreePath selectedTreePath = selectedTree.getSelectionPath();
        if (selectedTree == null) {
            return;
        }
        if (selectedTreePath == null) {
            return;
        }
        DefaultMutableTreeNode selectedNode =  (DefaultMutableTreeNode) selectedTreePath.getLastPathComponent();
        if (selectedNode == null) {
            return;
        }
        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
        if (parentNode == null) {
            return;
        }
        
        //was (12/3/12):
        //dataTreeChildrenLoader.loadNodeChildren(selectedNode);

        //now
        DataTreeChildrenLoader dataTreeChildrenLoader = new DataTreeChildrenLoader(selectedTree);
        dataTreeChildrenLoader.loadNodeChildren(parentNode);
    }

    public void reloadRootNode() {
        JTree selectedTree = getSelectedTree();
        DataTreeChildrenLoader dataTreeChildrenLoader = new DataTreeChildrenLoader(selectedTree);
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) selectedTree.getModel().getRoot();
        dataTreeChildrenLoader.loadNodeChildren(rootNode);
    }

    public void enableTrees(boolean enabled) {
        jTabbedTreePane.setEnabled(enabled);
        Iterator i = allTrees.iterator();
        while (i.hasNext()) {
            JTree tree = (JTree) i.next();
            tree.setEnabled(enabled);
        }
    }

    public boolean includeDisabledGroupsIsTicked() {
        return jcbIncludeInactiveGroups.isSelected();
    }

    //menuBar menu items listener
    public void actionPerformed(ActionEvent actionEvent) {
        String actionCommand = actionEvent.getActionCommand();
        /*
        if (actionCommand.equalsIgnoreCase("Restart")) {
        this.setVisible(false);
        this.dispose();
        LoginFrame.resetInstance();
        LoginFrame.getInstance().setVisible(true);
        return;
        }
         */
        if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_CLOSE)) {
            this.setVisible(false);
            this.dispose();
            System.exit(0);
        } else if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_FUTURE_FIXED_GROUPS)) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //thread off from the EventQueue, else we get a locked jpbLoadProgress bar
                    new Thread(new Runnable() {
                        public void run() {
                            FixedGroupViewingFrame fixedGroupViewingFrame = new FixedGroupViewingFrame();
                            fixedGroupViewingFrame.setVisible(true);
                        }
                    }).start();
                }
            });
            /*
        } else if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_FIXED_GROUP_BOOKINGS)) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //thread off from the EventQueue, else we get a locked jpbLoadProgress bar
                    new Thread(new Runnable() {
                        public void run() {
                            FixedGroupBookingsFrame fixedGroupBookingsFrame = new FixedGroupBookingsFrame();
                            fixedGroupBookingsFrame.setVisible(true);
                        }
                    }).start();
                }
            });
            */
        } else if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_VERSION_INFORMATION)) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //thread off from the EventQueue, else we get a locked jpbLoadProgress bar
                    new Thread(new Runnable() {
                        public void run() {
                            VersionInfoFrame versionInfoFrame = new VersionInfoFrame();
                            versionInfoFrame.setVisible(true);
                        }
                    }).start();
                }
            });
        } else if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_ACTIVE_GROUPS)) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //thread off from the EventQueue, else we get a locked jpbLoadProgress bar
                    new Thread(new Runnable() {
                        public void run() {
                            ViewActiveGroupsFrame viewActiveGroupsFrame = new ViewActiveGroupsFrame();
                            viewActiveGroupsFrame.setVisible(true);
                        }
                    }).start();
                }
            });
        } else if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_ROT_ANGLE_CHART)) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //thread off from the EventQueue, else we get a locked jpbLoadProgress bar
                    new Thread(new Runnable() {
                        public void run() {
                            RotatorAngleFrame rotatorAngleFrame = new RotatorAngleFrame();
                            rotatorAngleFrame.setVisible(true);
                        }
                    }).start();
                }
            });
            /*
        } else if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_SETUP_SEMESTER)) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //thread off from the EventQueue, else we get a locked jpbLoadProgress bar
                    new Thread(new Runnable() {
                        public void run() {
                            SetupSemesterFrame setupSemesterFrame = new SetupSemesterFrame();
                            setupSemesterFrame.setVisible(true);
                        }
                    }).start();
                }
            });
             * */
        } else if (actionCommand.equalsIgnoreCase(MainFrame.ACTION_CMD_SEMESTER_ACCOUNTS)) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //thread off from the EventQueue, else we get a locked jpbLoadProgress bar
                    new Thread(new Runnable() {
                        public void run() {
                            SemesterAccountsEditingFrame accountEditingFrame = new SemesterAccountsEditingFrame();
                            accountEditingFrame.setVisible(true);
                        }
                    }).start();
                }
            });
        } else {
            JOptionPane.showMessageDialog(this, "Unknown command: " + actionCommand);
        }
    }

    public void showHeaderPanel(final IEditablePanel editablePanel) {

        JPanel smallerPanel = (JPanel) editablePanel;
        smallerPanel.setSize(jpDetailPanel.getSize());

        this.currentEditingPanel = editablePanel;

        final JPanel detailPanel = jpDetailPanel;
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                detailPanel.removeAll();
                detailPanel.add((Component) editablePanel, BorderLayout.CENTER);

                detailPanel.validate();
                detailPanel.repaint();
                MainFrame.getInstance().validate();
                MainFrame.getInstance().repaint();
            }
        });

    }

    public void clearPanels() {

        this.currentEditingPanel = null;

        final JPanel detailPanel = jpDetailPanel;
        final JPanel controlPanel = jpControlPanel;

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                detailPanel.removeAll();
                detailPanel.validate();
                detailPanel.repaint();

                controlPanel.removeAll();
                controlPanel.validate();
                controlPanel.repaint();

                MainFrame.getInstance().validate();
                MainFrame.getInstance().repaint();
            }
        });
    }

    public void showControlPanel(final JPanel displayPanel) {
        final JPanel controlPanel = jpControlPanel;
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                controlPanel.add(displayPanel, BorderLayout.CENTER);
                controlPanel.validate();
                controlPanel.repaint();
                MainFrame.getInstance().validate();
                MainFrame.getInstance().repaint();
            }
        });
    }

    public JPanel getControlPanel() {
        return jpControlPanel;
    }
    /*
    public JPanel getDetailPanel() {
    return jpDetailPanel;
    }
     */

    public IEditablePanel getEditingPanel() {
        return currentEditingPanel;
    }

    /** Displays a message in the jtaMessageArea
     *  and scrolls the area so the the message is at the bottom.
     */
    public void displayMessage(final String message) {
        logger.info("displayMessage( " + message + ")");

        EventQueue.invokeLater(
                new Runnable() {

                    public void run() {
                        Document doc = jtpMessagePane.getDocument();
                        try {
                            doc.insertString(doc.getLength(), message, jtpMessagePane.getStyle("regular"));
                            doc.insertString(doc.getLength(), "\n", jtpMessagePane.getStyle("regular"));
                            jtpMessagePane.setCaretPosition(jtpMessagePane.getDocument().getLength());
                        } catch (Exception e) {
                            e.printStackTrace();
                            logger.error(e);
                        }
                    }
                });
    }

    private void selectTabbedPane(int paneNumber) {
        jTabbedTreePane.setSelectedIndex(paneNumber);
    }

    private JTree getSelectedTree() {

        JScrollPane selectedTreeScrollPane = (JScrollPane) jTabbedTreePane.getSelectedComponent();
        JViewport selectedViewport = (JViewport) selectedTreeScrollPane.getComponent(0);
        JTree selectedTree = (JTree) selectedViewport.getView();
        return selectedTree;
    }

    private void initComponents2() {
        //jcbIncludeInactiveGroups.setVisible(Session.getInstance().getUser().isSuperUser());
        initialiseTreeTabbedPane();
               
        //FOR NEXT VERSION
        /*
        if (Session.getInstance().getUser().isSuperUser()) {
            JMenu jmAdminMenu = new JMenu();

            JMenuItem semesterMenuItem = new JMenuItem("Set-up semester");
            semesterMenuItem.setActionCommand(MainFrame.ACTION_CMD_SETUP_SEMESTER);
            semesterMenuItem.addActionListener(this);
            jmAdminMenu.add(semesterMenuItem);

            jmAdminMenu.setText("Admin");
            jMenuBar.add(jmAdminMenu);
        }
         */
        
    }

    private void initialiseTreeTabbedPane() {
        boolean isSuperUser = Session.getInstance().getUser().isSuperUser();

        //remove any change listeners
        ChangeListener[] changeListeners = jTabbedTreePane.getChangeListeners();
        if (changeListeners.length > 0) {
            ChangeListener foundChangeListener = changeListeners[0];
            jTabbedTreePane.removeChangeListener(foundChangeListener);
        }

        jTabbedTreePane.removeAll();
        allTrees.clear();

        if (isSuperUser) {
            logger.info("isSuperUser, loading UsersTreePanel, ProgrammesTreePanel and TagsTreePanel");

            JScrollPane usersTreeScrollPane = new javax.swing.JScrollPane();
            JTree allUsersTree = DataTreeFactory.getAllUsersTree();
            usersTreeScrollPane.setViewportView(allUsersTree);
            jTabbedTreePane.addTab("Users", usersTreeScrollPane);
            allTrees.add(allUsersTree);

            JScrollPane programmesTreeScrollPane = new javax.swing.JScrollPane();
            JTree allProgrammesTree = DataTreeFactory.getAllProgrammesTree();
            programmesTreeScrollPane.setViewportView(allProgrammesTree);
            jTabbedTreePane.addTab("Programmes", programmesTreeScrollPane);
            allTrees.add(allProgrammesTree);

            JScrollPane tagsTreeScrollPane = new javax.swing.JScrollPane();
            JTree allTagsTree = DataTreeFactory.getAllTagsTree();
            tagsTreeScrollPane.setViewportView(allTagsTree);
            jTabbedTreePane.addTab("TAGs", tagsTreeScrollPane);
            allTrees.add(allTagsTree);

            jTabbedTreePane.updateUI();
        } else {

            JScrollPane userAccessPermissionTreeScrollPane = new javax.swing.JScrollPane();
            JTree userTree1 = DataTreeFactory.getUserTree(DataTreeFactory.ACCESS_PERMISSION_TYPE_USER_TREE);
            userAccessPermissionTreeScrollPane.setViewportView(userTree1);
            jTabbedTreePane.addTab("User", userAccessPermissionTreeScrollPane);
            allTrees.add(userTree1);

            JScrollPane programmesTreeScrollPane = new javax.swing.JScrollPane();
            JTree userTree2 = DataTreeFactory.getUserTree(DataTreeFactory.PROGRAMMES_TYPE_USER_TREE);
            programmesTreeScrollPane.setViewportView(userTree2);
            jTabbedTreePane.addTab("Programmes", programmesTreeScrollPane);
            allTrees.add(userTree2);
            jTabbedTreePane.updateUI();

        }

        jTabbedTreePane.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent changeEvent) {
                /*
                //User has clicked on a tab
                JTree selectedTree = getSelectedTree();
                DefaultTreeModel treeModel = (DefaultTreeModel) selectedTree.getModel();
                DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) treeModel.getRoot();
                //int initialRootNodeChildCount = rootNode.getChildCount();
                DataTreeChildrenLoader_NEW dataTreeChildrenLoader_NEW = new DataTreeChildrenLoader_NEW(selectedTree);
                dataTreeChildrenLoader_NEW.loadNodeChildren(rootNode);
                //if (initialRootNodeChildCount > 0) {
                //    rootNode.removeAllChildren();
                //    dataTreeChildrenLoader.loadChildren(rootNode);
                //    treeModel.nodeStructureChanged(rootNode);
                //}
                MainFrame.getInstance().clearPanels();
                */
            }
        });

        /*
         * would put this in custom creation code
         * it wont work as the property is not a bean constrained property
         * see
         * http://java.sun.com/docs/books/tutorial/javabeans/properties/constrained.html
         *
        jTabbedTreePane.addVetoableChangeListener(new VetoableChangeListener() {
            public void vetoableChange(PropertyChangeEvent pce) throws PropertyVetoException {
                System.err.println("vetoableChange(" + pce + ")");

                if (MainFrame.getInstance().getEditingPanel().isBeingEdited()) {
                    JOptionPane.showMessageDialog(MainFrame.getInstance(), "Please submit your edits before changing tree tab.");
                    throw new PropertyVetoException("Can't change tabs", pce);
                }
            }
        });
        */

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedTreePane;
    private javax.swing.JCheckBox jcbIncludeInactiveGroups;
    private javax.swing.JMenu jmFileMenu;
    private javax.swing.JMenu jmToolsMenu;
    private javax.swing.JMenu jmViewMenu;
    private javax.swing.JPanel jpControlPanel;
    private javax.swing.JPanel jpDetailPanel;
    private javax.swing.JTextPane jtpMessagePane;
    // End of variables declaration//GEN-END:variables
}

