/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ViewActiveGroupsFrame2.java
 *
 * Created on Feb 12, 2010, 9:05:21 AM
 */
package ngat.oss.client.gui.frame;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.logging.Level;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import ngat.astrometry.BasicSite;
import ngat.astrometry.TargetTrackCalculator;
import ngat.astrometry.TargetTrackCalculatorFactory;
import ngat.astrometry.approximate.AlternativeTargetTrackCalculatorFactory;
import ngat.astrometry.approximate.BasicAstroLibImpl;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.panel.rotator.RotatorMountTimePanel;
import ngat.oss.client.gui.panel.rotator.RotatorPositionSelectionListener;
import ngat.oss.client.gui.panel.rotator.RotatorSkyTimePanel;
import ngat.oss.client.gui.reference.CONST;
import ngat.oss.client.gui.reference.Session;
import ngat.oss.client.gui.render.TargetRenderer;
import ngat.oss.client.gui.util.FrameCenterer;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IProgram;
import ngat.phase2.ITarget;
import ngat.phase2.IUser;
import ngat.sms.models.standard.StandardChargeAccountingModel;
import org.apache.log4j.Logger;

/**
 *
 * @author nrc
 */
public class RotatorAngleFrame extends javax.swing.JFrame implements RotatorPositionSelectionListener {

    static Logger logger = Logger.getLogger(RotatorAngleFrame.class);

    private static final Dimension SIZE = new Dimension(815, 453);
    private static final String MOUNT = "MOUNT";
    private static final String SKY = "SKY";
    private static final String RATCAM = "RATCAM";
    private static final String RINGO2 = "RINGO2";
    private static final String RISE = "RISE";
    private ButtonGroup rotatorButtonGroup = new ButtonGroup();
    
    private List programmesList;
    private List targetList;
    private Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();

    /** Creates new form ViewActiveGroupsFrame */
    public RotatorAngleFrame() {
        initComponents();
        populateComponents();
        setSize(CONST.MAIN_FRAME_SIZE);
        new FrameCenterer(this).start();
        
               
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfDateTimeOfPointer = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfAngleOfPointer = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jbtnCreateChart = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jplChartContainerPanel = new javax.swing.JPanel();
        jtfEstimatedExecutionTime = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        startDateTimeEditorPanel = new ngat.beans.guibeans.DateTimeEditorPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jcbProgrammes = new javax.swing.JComboBox();
        jcbTarget = new javax.swing.JComboBox();
        jlblLocked = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jrbSkyAngle = new javax.swing.JRadioButton();
        jrbMountAngle = new javax.swing.JRadioButton();
        jplInstrument = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jcbInstrumentName = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jtfDateTimeOfPointer.setEditable(false);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setText("3)");

        jtfAngleOfPointer.setEditable(false);
        jtfAngleOfPointer.setBackground(new java.awt.Color(153, 255, 255));
        jtfAngleOfPointer.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jtfAngleOfPointer.setText("0.0");

        jLabel4.setText("(sec)");

        jLabel9.setText("Angle:");

        jLabel1.setText("Please select the date and time to start the graph from (the duration of the graph will be 24 hours):");

        jbtnCreateChart.setText("Create Chart");
        jbtnCreateChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCreateChartActionPerformed(evt);
            }
        });

        jLabel10.setText("(degrees)");

        jplChartContainerPanel.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("1)");

        jLabel11.setText("Date-time (of mouse pointer):");

        jLabel3.setText("Please enter an execution time for the group:");

        startDateTimeEditorPanel.setTitle("Start date-time");

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel15.setText("2)");

        jLabel16.setText("Please select a programme and target:");

        jcbProgrammes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbProgrammesActionPerformed(evt);
            }
        });

        jlblLocked.setText("LOCKED");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel6.setText("4)");

        jLabel7.setText("Please select the type of angle you want to use:");

        jrbSkyAngle.setSelected(true);
        jrbSkyAngle.setText("Sky angle");
        jrbSkyAngle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbSkyAngleActionPerformed(evt);
            }
        });

        jrbMountAngle.setText("Mount angle");
        jrbMountAngle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMountAngleActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel6)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(jrbSkyAngle)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jrbMountAngle))
                    .add(jLabel7)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jrbSkyAngle)
                    .add(jrbMountAngle)))
        );

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel13.setText("5)");

        jLabel14.setText("Please select the instrument to align to:");

        jcbInstrumentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbInstrumentNameActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jplInstrumentLayout = new org.jdesktop.layout.GroupLayout(jplInstrument);
        jplInstrument.setLayout(jplInstrumentLayout);
        jplInstrumentLayout.setHorizontalGroup(
            jplInstrumentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jplInstrumentLayout.createSequentialGroup()
                .add(jLabel13)
                .add(18, 18, 18)
                .add(jplInstrumentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jplInstrumentLayout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(jcbInstrumentName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel14)))
        );
        jplInstrumentLayout.setVerticalGroup(
            jplInstrumentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jplInstrumentLayout.createSequentialGroup()
                .add(jplInstrumentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel13)
                    .add(jLabel14))
                .add(6, 6, 6)
                .add(jcbInstrumentName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jplChartContainerPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 748, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtfAngleOfPointer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtfDateTimeOfPointer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel5)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(24, 24, 24)
                                .add(startDateTimeEditorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel1)))
                    .add(layout.createSequentialGroup()
                        .add(319, 319, 319)
                        .add(jlblLocked))
                    .add(layout.createSequentialGroup()
                        .add(32, 32, 32)
                        .add(jbtnCreateChart))
                    .add(layout.createSequentialGroup()
                        .add(jLabel15)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jcbProgrammes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jcbTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 457, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel16)))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jplInstrument, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(18, 18, 18)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtfEstimatedExecutionTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(35, 35, 35)
                        .add(jLabel4)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(jtfEstimatedExecutionTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(jLabel16))
                .add(4, 4, 4)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jcbProgrammes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jcbTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(startDateTimeEditorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jplInstrument, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(47, 47, 47)
                .add(jbtnCreateChart)
                .add(6, 6, 6)
                .add(jlblLocked)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jplChartContainerPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 271, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jtfAngleOfPointer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel10)
                    .add(jLabel11)
                    .add(jtfDateTimeOfPointer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(71, 71, 71))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateComponents() {
        rotatorButtonGroup = new ButtonGroup();
        rotatorButtonGroup.add(jrbMountAngle);
        rotatorButtonGroup.add(jrbSkyAngle);
        jrbMountAngle.setActionCommand(MOUNT);
        jrbSkyAngle.setActionCommand(SKY);

        StandardChargeAccountingModel standardChargeAccountingModel = new StandardChargeAccountingModel();

        //populate programmes list
        setProgrammesList();
        updateProgrammeListControl();
        setUpInstrumentList();
        jlblLocked.setVisible(false);
    }

    private void setUpInstrumentList() {
        
        jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_ROTATOR));
        
        /*
        if (Session.getInstance().getUser().isSuperUser()) {
            jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_ROTATOR));
        } else {
            jcbInstrumentName.setModel(new javax.swing.DefaultComboBoxModel(CONST.ALL_INSTRUMENTS_FOR_ROTATOR_EXCEPT_IOI));
        }
        */
    }
    
    private void setProgrammesList() {

        IUser currentUser = Session.getInstance().getUser();
        try {
            if (currentUser.isSuperUser()) {
                programmesList = phase2ModelClient.listProgrammes();
            } else {
                programmesList = phase2ModelClient.listProgrammesOfUser(currentUser.getID());
            }
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    private void updateProgrammeListControl() {
        jcbProgrammes.removeAllItems();

        Iterator pi = programmesList.iterator();
        while (pi.hasNext()) {
            IProgram program = (IProgram) pi.next();
            String programName = program.getName();
            jcbProgrammes.addItem(programName);
        }
    }

    private void updateTargetListControl() {
        jcbTarget.removeAllItems();

        Iterator pi = targetList.iterator();
        while (pi.hasNext()) {
            ITarget target = (ITarget) pi.next();
            String targetDesc = TargetRenderer.getShortDescription(target);
            jcbTarget.addItem(targetDesc);
        }
    }

    private void setTargetsList(IProgram programSelected) {
        long programId = programSelected.getID();

        IUser currentUser = Session.getInstance().getUser();
        try {
            targetList = phase2ModelClient.listTargets(programId);
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    private void jbtnCreateChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCreateChartActionPerformed

        /*
        if (jcbInstrumentName.getSelectedItem().equals(CONST.IO_O)) {
            JOptionPane.showMessageDialog(this, "IO:O is currently unavailable.");
            return;
        }
        */
        
        jplChartContainerPanel.removeAll();

        JPanel timePanel = getTimePanel(rotatorButtonGroup.getSelection().getActionCommand());
        if (timePanel != null) {
            jplChartContainerPanel.add((Component) timePanel, BorderLayout.CENTER);
            jplChartContainerPanel.repaint();
        }
}//GEN-LAST:event_jbtnCreateChartActionPerformed

    private ITarget getSelectedTarget() {
        int targetIndex = jcbTarget.getSelectedIndex();
        return (ITarget) targetList.get(targetIndex);
    }

    private long getExecutionTime() throws Exception {
        long execTime;
        try {
            execTime = Long.parseLong(jtfEstimatedExecutionTime.getText());
            execTime *= 1000;
        } catch (NumberFormatException nfe) {
            throw new Exception("jtfEstimatedExecutionTime value not a number");
        }
        return execTime;
    }

    private JPanel getTimePanel(String actionCommand) {
        TargetTrackCalculatorFactory targetTrackCalculatorFactory = new AlternativeTargetTrackCalculatorFactory();
        BasicSite site = new BasicSite("obs", Math.toRadians(28.7624), Math.toRadians(-17.8792));

        TargetTrackCalculator targetTrackCalculator = targetTrackCalculatorFactory.getTrackCalculator(getSelectedTarget(), site);
        long executionTime;
        try {
            executionTime = (long) getExecutionTime();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid execution time.");
            return null;
        }

        String instrumentName = (String) jcbInstrumentName.getSelectedItem();
        double instrumentOffsetAngle; 
        try {
            instrumentOffsetAngle = CONST.getOffsetAngleOfInstrument(instrumentName);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return null;
        }
        
        if (actionCommand.equals(SKY)) {
            RotatorSkyTimePanel rotatorSkyTimePanel = new RotatorSkyTimePanel(site, new BasicAstroLibImpl(), targetTrackCalculatorFactory, instrumentOffsetAngle);

            try {
                long start = startDateTimeEditorPanel.getTime();
                long end = start + 86400 * 1000L; //start + 24 hours

                rotatorSkyTimePanel.addRotatorPositionSelectionListener(this);

                rotatorSkyTimePanel.setSize(jplChartContainerPanel.getSize());
                rotatorSkyTimePanel.setPreferredSize(jplChartContainerPanel.getSize());
                rotatorSkyTimePanel.update(targetTrackCalculator, start, end, executionTime);
                return rotatorSkyTimePanel;
            } catch (ParseException ex) {
                ex.printStackTrace();
                logger.error(ex);
                return null;
            }
        } else if (actionCommand.equals(MOUNT)) {
            RotatorMountTimePanel rotatorMountTimePanel = new RotatorMountTimePanel(site, new BasicAstroLibImpl(), targetTrackCalculatorFactory, instrumentOffsetAngle);

            try {
                long start = startDateTimeEditorPanel.getTime();
                long end = start + 86400 * 1000L; //start + 24 hour

                rotatorMountTimePanel.addRotatorPositionSelectionListener(this);
                
                rotatorMountTimePanel.setSize(jplChartContainerPanel.getSize());
                rotatorMountTimePanel.setPreferredSize(jplChartContainerPanel.getSize());
                rotatorMountTimePanel.update(targetTrackCalculator, start, end, executionTime);
                return rotatorMountTimePanel;
            } catch (ParseException ex) {
                ex.printStackTrace();
                logger.error(ex);
                return null;
            }
        } else {
            return null;
        }
    }

    private void jcbProgrammesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProgrammesActionPerformed
        int selectedIndex = jcbProgrammes.getSelectedIndex();
        if (selectedIndex == -1) {
            return;
        }

        IProgram selectedProgram = (IProgram) programmesList.get(selectedIndex);
        setTargetsList(selectedProgram);
        updateTargetListControl();
    }//GEN-LAST:event_jcbProgrammesActionPerformed

    private void jrbSkyAngleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbSkyAngleActionPerformed
        String actionCommand = rotatorButtonGroup.getSelection().getActionCommand();
        jplInstrument.setVisible(actionCommand.equalsIgnoreCase(SKY));
}//GEN-LAST:event_jrbSkyAngleActionPerformed

    private void jrbMountAngleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMountAngleActionPerformed
        String actionCommand = rotatorButtonGroup.getSelection().getActionCommand();
        jplInstrument.setVisible(actionCommand.equalsIgnoreCase(SKY));
}//GEN-LAST:event_jrbMountAngleActionPerformed

    private void jcbInstrumentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbInstrumentNameActionPerformed

}//GEN-LAST:event_jcbInstrumentNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RotatorAngleFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtnCreateChart;
    private javax.swing.JComboBox jcbInstrumentName;
    private javax.swing.JComboBox jcbProgrammes;
    private javax.swing.JComboBox jcbTarget;
    private javax.swing.JLabel jlblLocked;
    private javax.swing.JPanel jplChartContainerPanel;
    private javax.swing.JPanel jplInstrument;
    private javax.swing.JRadioButton jrbMountAngle;
    private javax.swing.JRadioButton jrbSkyAngle;
    private javax.swing.JTextField jtfAngleOfPointer;
    private javax.swing.JTextField jtfDateTimeOfPointer;
    private javax.swing.JTextField jtfEstimatedExecutionTime;
    private ngat.beans.guibeans.DateTimeEditorPanel startDateTimeEditorPanel;
    // End of variables declaration//GEN-END:variables

    public void rotatorSelection(long time, double rotator) {
        jtfAngleOfPointer.setText(String.valueOf(rotator));
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm, z");
        dateFormat.setDateFormatSymbols(new DateFormatSymbols(Locale.UK)); //make sure months are spelt in English
        SimpleTimeZone UTC = new SimpleTimeZone(0, "UTC");
        dateFormat.setTimeZone(UTC);
        String dateFormatted = dateFormat.format(new Date(time)).toString();
        jtfDateTimeOfPointer.setText(dateFormatted);
    }

    public void receiveLockingEvent(boolean locked) {
        jlblLocked.setVisible(locked);
    }
}
