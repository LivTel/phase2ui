/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ViewActiveGroupsFrame2.java
 *
 * Created on Feb 12, 2010, 9:05:21 AM
 */

package ngat.oss.client.gui.frame;

import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.table.AbstractTableModel;
import ngat.oss.client.AccessModelClient;
import ngat.oss.client.Phase2ModelClient;
import ngat.oss.client.gui.reference.CONST;
import ngat.oss.client.gui.util.FrameCenterer;
import ngat.oss.exception.Phase2Exception;
import ngat.phase2.IGroup;
import ngat.phase2.IObservingConstraint;
import ngat.phase2.IProgram;
import ngat.phase2.IProposal;
import ngat.phase2.ITimingConstraint;
import ngat.phase2.IUser;
import org.apache.log4j.Logger;


/**
 *
 * @author nrc
 */
public class ViewActiveGroupsFrame extends javax.swing.JFrame {

    static Logger logger = Logger.getLogger(ViewActiveGroupsFrame.class);
    private static final Dimension SIZE = new Dimension(815, 453);

    /** Creates new form ViewActiveGroupsFrame */
    public ViewActiveGroupsFrame() {
        initComponents();
        setSize(CONST.MAIN_FRAME_SIZE);
        new FrameCenterer(this).start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jbtnRequestBookings = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblStdUserBookingViewTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Active Groups Detail");

        jbtnRequestBookings.setText("Request the group list");
        jbtnRequestBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRequestBookingsActionPerformed(evt);
            }
        });

        jLabel2.setText("(the query may take a few seconds to run)");

        jtblStdUserBookingViewTable.setModel(new GroupSummaryTableModel(false));
        jScrollPane1.setViewportView(jtblStdUserBookingViewTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1))
                    .add(layout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(jbtnRequestBookings)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2)))
                .addContainerGap(261, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnRequestBookings)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnRequestBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRequestBookingsActionPerformed
        jtblStdUserBookingViewTable.setModel(new GroupSummaryTableModel(true));
        jtblStdUserBookingViewTable.updateUI();
}//GEN-LAST:event_jbtnRequestBookingsActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewActiveGroupsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnRequestBookings;
    private javax.swing.JTable jtblStdUserBookingViewTable;
    // End of variables declaration//GEN-END:variables

}
class GroupSummaryTableModel extends AbstractTableModel {

    static Logger logger = Logger.getLogger(GroupSummaryTableModel.class);

    private ArrayList groupSummaryList = new ArrayList();

    public GroupSummaryTableModel(boolean populate) {
        if (!populate) {
            return;
        }

        //iterate through programmes all the way down to active groups
        try {
            Phase2ModelClient phase2ModelClient = Phase2ModelClient.getInstance();
            AccessModelClient accessModelClient = AccessModelClient.getInstance();

            List programmeList = phase2ModelClient.listProgrammes();
            Iterator progListIterator = programmeList.iterator();
            while (progListIterator.hasNext()) {
                IProgram program = (IProgram) progListIterator.next();
                String programmeName = program.getName(); //VAR
                List proposalList = phase2ModelClient.listProposalsOfProgramme(program.getID());
                Iterator proposalListIterator = proposalList.iterator();
                while (proposalListIterator.hasNext()) {
                    IProposal proposal = (IProposal) proposalListIterator.next();
                    IUser piUser = accessModelClient.getUser(accessModelClient.getProposalPI(proposal.getID()));
                    if (piUser != null) {
                        String piName = piUser.getName(); //VAR
                        String proposalName = proposal.getName(); //VAR
                        List groupList = phase2ModelClient.listGroups(proposal.getID(), false); //don't include inactive ones
                        Iterator groupListIterator = groupList.iterator();
                        while (groupListIterator.hasNext()) {
                            IGroup group = (IGroup) groupListIterator.next();
                            if (group.isActive()) { //should always be the case because of call to listGroups
                                String groupName = group.getName(); //VAR
                                ITimingConstraint timingConstraint = group.getTimingConstraint(); //VAR
                                if (!timingConstraintHasExpired(timingConstraint)) {
                                    List observingConstraints = group.listObservingConstraints(); //VAR
                                    GroupSummaryWrapper groupSummaryWrapper = new GroupSummaryWrapper(programmeName, piName, proposalName, groupName, timingConstraint, observingConstraints);
                                    addTableLineEntry(groupSummaryWrapper);
                                }
                            }
                        }
                    } else {
                        logger.info("PI of proposal: " + proposal.getName() + " is null");
                    }
                }
            }

        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
        }

    }

    private boolean timingConstraintHasExpired(ITimingConstraint timingConstraint) {
        if (timingConstraint != null) {
            if (timingConstraint.getEndTime() > new Date().getTime()) {
                return false;
            } else {
                return true;
            }
        } else {
            return true;
        }
    }

    public void addTableLineEntry(GroupSummaryWrapper groupSummaryWrapper) {
        groupSummaryList.add(groupSummaryWrapper);
    }

    public ArrayList getData() {
        return groupSummaryList;
    }

    public int getRowCount() {
        return groupSummaryList.size();
    }

    public int getColumnCount() {
        return 6;
    }

    public String getColumnName(int col) {
        switch (col) {
            case 0:
                return "Programme";
            case 1:
                return "PI";
            case 2:
                return "Proposal";
            case 3:
                return "Group";
            case 4:
                return "Timing Constraint";
            case 5:
                return "Observing Constraints";
        }
        return "UNKNOWN";
    }

    public Object getValueAt(int row, int col) {
        GroupSummaryWrapper groupSummaryWrapper = (GroupSummaryWrapper) groupSummaryList.get(row);

        switch (col) {
            case 0:
                return groupSummaryWrapper.getProgrammeName();
            case 1:
                return groupSummaryWrapper.getPiName();
            case 2:
                return groupSummaryWrapper.getProposalName();
            case 3:
                return groupSummaryWrapper.getGroupName();
            case 4:
                return groupSummaryWrapper.getTimingConstraintSummary();
            case 5:
                return groupSummaryWrapper.getObservingConstraintsSummary();
        }

        return "UNKNOWN";
    }
}
class GroupSummaryWrapper {

    private String programmeName, piName, proposalName, groupName;
    private ITimingConstraint timingConstraint;
    private List observingConstraints;

    public GroupSummaryWrapper(String programmeName, String piName, String proposalName, String groupName,  ITimingConstraint timingConstraint, List observingConstraints) {
        this.programmeName = programmeName;
        this.piName = piName;
        this.proposalName = proposalName;
        this.groupName = groupName;
        this.timingConstraint = timingConstraint;
        this.observingConstraints = observingConstraints;
    }

    public String getGroupName() {
        return groupName;
    }

    public String getObservingConstraintsSummary() {
        String s = "";
        Iterator ocsi = observingConstraints.iterator();
        boolean addedComma = false;
        while (ocsi.hasNext()) {
            s += ((IObservingConstraint)ocsi.next()).getShortDescription() + ",";
            addedComma = true;
        }
        if (addedComma) {
            s = s.substring(0, s.length() - 1);
        }
        return s;
    }

    public String getPiName() {
        return piName;
    }

    public String getProgrammeName() {
        return programmeName;
    }

    public String getProposalName() {
        return proposalName;
    }

    public String getTimingConstraintSummary() {
        return timingConstraint.getShortDescription();
    }

}