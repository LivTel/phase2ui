/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ViewActiveGroupsFrame2.java
 *
 * Created on Feb 12, 2010, 9:05:21 AM
 */
package ngat.oss.client.gui.frame;

import java.rmi.RemoteException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import ngat.oss.client.AccountModelClient;
import ngat.oss.client.gui.panel.SemesterAccountPanel;
import ngat.oss.client.gui.reference.CONST;
import ngat.oss.client.gui.util.FrameCenterer;
import ngat.oss.exception.Phase2Exception;
import ngat.oss.reference.Const;
import ngat.phase2.ISemester;
import ngat.phase2.ISemesterPeriod;
import org.apache.log4j.Logger;

/**
 *
 * @author nrc
 */
public class SemesterAccountsEditingFrame extends javax.swing.JFrame {

    static Logger logger = Logger.getLogger(SemesterAccountsEditingFrame.class);
   
    private AccountModelClient proposalAccountModelClient = new AccountModelClient(Const.PROPOSAL_ACCOUNT_SERVICE);
    private AccountModelClient tagAccountModelClient = new AccountModelClient(Const.TAG_ACCOUNT_SERVICE);

    DefaultComboBoxModel semesterComboBoxModel;

    /** Creates new form ViewActiveGroupsFrame */
    public SemesterAccountsEditingFrame() {
        initComponents();
        populateComponents();
        setSize(CONST.MAIN_FRAME_SIZE);
        new FrameCenterer(this).start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpSemestersTabbedPane = new javax.swing.JTabbedPane();
        jbtnClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jbtnGetAccounts = new javax.swing.JButton();
        jcbSemester = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Semester Control");

        jbtnClose.setText("Close");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Semester:");

        jbtnGetAccounts.setText("Get Accounts");
        jbtnGetAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGetAccountsActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtpSemestersTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                    .add(jbtnClose)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jcbSemester, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnGetAccounts)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jcbSemester, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnGetAccounts))
                .add(18, 18, 18)
                .add(jtpSemestersTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbtnClose))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed

        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jbtnCloseActionPerformed

    private void jbtnGetAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGetAccountsActionPerformed

        JOptionPane.showMessageDialog(this, "The query will take a few seconds to run, click OK to start.");
        
        String semesterName = (String) jcbSemester.getSelectedItem();

        ISemester semester = null;
        try {
            semester = findSemester(semesterName);
        } catch (Phase2Exception ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, "an error occurred attempting to contact the phase2 server");
        }

        if (semester == null) {
            return;
        }

        SemesterAccountPanel semesterAccountPanel = new SemesterAccountPanel(proposalAccountModelClient, tagAccountModelClient, semester, true);
        jtpSemestersTabbedPane.addTab(semesterName, semesterAccountPanel);

        int tabCount = jtpSemestersTabbedPane.getTabCount();
        jtpSemestersTabbedPane.setSelectedIndex(tabCount - 1);

    }//GEN-LAST:event_jbtnGetAccountsActionPerformed


    private ISemester findSemester(String semesterName) throws Phase2Exception {

            List semesters = proposalAccountModelClient.listSemestersFromDate(new Date().getTime());
            Iterator i = semesters.iterator();
            while (i.hasNext()) {
                ISemester semester = (ISemester) i.next();
                if (semester.getName().equalsIgnoreCase(semesterName)) {
                    return semester;
                }
            }

        return null;
    }

    private void populateComponents() {

        //create tabs for each semester after today

        //semester list
        try {
            List semesters = proposalAccountModelClient.listSemestersFromDate(new Date().getTime());
            
            Iterator i = semesters.iterator();
            while (i.hasNext()) {
                 ISemester semester = (ISemester) i.next();
                 jcbSemester.addItem(semester.getName());
            }
        } catch (RemoteException ex) {
            ex.printStackTrace();
            logger.error(ex);
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    private void addSemesterTabbedPanel(ISemester semester) {

        //create and add the required semester panel
        SemesterAccountPanel semesterAccountPanel = new SemesterAccountPanel(proposalAccountModelClient, tagAccountModelClient, semester, true);
        jtpSemestersTabbedPane.addTab(semester.getName(), semesterAccountPanel);
        
        //set the panel as selected if it is the semester of now
        try {
            long nowSemesterId;
            ISemesterPeriod nowSemesterPeriod = proposalAccountModelClient.getSemesterPeriodOfDate(new Date().getTime());
            if (nowSemesterPeriod.isOverlap()) {
                //select the second semester
                nowSemesterId = nowSemesterPeriod.getSecondSemester().getID();
            } else {
                //select the first (and only semester)
                nowSemesterId = nowSemesterPeriod.getFirstSemester().getID();
            }
            if (nowSemesterId == semester.getID()) {
                //semester adding tab for is the current semester
                jtpSemestersTabbedPane.setSelectedIndex(jtpSemestersTabbedPane.getTabCount() - 1);
            }
            /*
            ISemester nowSemester = proposalAccountModelClient.getSemesterOfDate(new Date().getTime());
            if (nowSemester.getID() == semester.getID()) {
                //semester adding tab for is the current semester
                jtpSemestersTabbedPane.setSelectedIndex(jtpSemestersTabbedPane.getTabCount() - 1);
            }
            */
        } catch (RemoteException ex) {
            ex.printStackTrace();
            logger.error(ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SemesterAccountsEditingFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnGetAccounts;
    private javax.swing.JComboBox jcbSemester;
    private javax.swing.JTabbedPane jtpSemestersTabbedPane;
    // End of variables declaration//GEN-END:variables

}
